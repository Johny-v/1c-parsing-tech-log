#Область ДополнительныеОбработки

Функция СведенияОВнешнейОбработке() Экспорт
	
	МассивНазначений = Новый Массив;
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
	ПараметрыРегистрации.Вставить("Наименование", "Получаем данные из zabbix");
	ПараметрыРегистрации.Вставить("Версия", "2019.06.18");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация", ИнформацияПоИсторииИзменений());
	ПараметрыРегистрации.Вставить("ВерсияБСП", "1.2.1.4");
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	ДобавитьКоманду(ТаблицаКоманд,
	                "Настройка получения данных из zabbix",
					"НастройкаПолучениеДанныхИзZabbix",
					"ОткрытиеФормы",
					Истина,
					);
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры

Функция ИнформацияПоИсторииИзменений()
	Возврат "
	| <div style='text-indent: 25px;'>Данная обработка позволяет отображать загружать и настраивать загрузку данных из Zabbix.</div>
	| <hr />
	| Подробную информацию смотрите по адресу интернет: <a target='_blank' href='https://github.com/Polyplastic/1c-parsing-tech-log'>https://github.com/Polyplastic/1c-parsing-tech-log</a>";
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаДаных

Процедура ВыполнитьЗагрузкуДанных(Замер,ДополнительнаяОбработка=Неопределено) Экспорт
	
	ЗагрузитьДанныеВЗамерСервер(Замер);	
	
КонецПроцедуры

Функция ЗагрузитьДанныеВЗамерСервер(Замер) Экспорт

	// получим настройки загрузки
	мНастройка = УправлениеХранилищемНастроекВызовСервера.ДанныеИзБезопасногоХранилища(Замер);
	
	Если мНастройка=Неопределено Тогда
		ЗаписьЖурналаРегистрации("ЧтениеВСправочник",УровеньЖурналаРегистрации.Ошибка,Неопределено,Замер,"Не созданы настройки для операции произвольной загрузки по замеру ("+Замер+")");
		Возврат 0;
	КонецЕсли;
	
	
	АдресИнтернет = мНастройка.АдресИнтернет;
	АдресСервера = мНастройка.АдресСервера;
	Логин = мНастройка.Логин;
	Пароль = мНастройка.Пароль;
	РежимОбработкиДанных = мНастройка.РежимОбработкиДанных;
	АдресURL = "http://"+АдресСервера+"/"+АдресИнтернет;
	auth = Неопределено;
	
	//инициализация фильтров
	РеквизитыЗамера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Замер, "ФильтрТипСобытия,ФильтрСвойстваСобытия,ФильтрСвойстваСобытияКроме,ФильтрДлительность,НачалоПериода,КонецПериода,ТипЗамера,ДополнительнаяОбработка");
	НачалоПериода 	= РеквизитыЗамера.НачалоПериода;
	КонецПериода 	= РеквизитыЗамера.КонецПериода;
	РеквизитыЗамера.Вставить("ФильтрТипСобытия", РеквизитыЗамера.ФильтрТипСобытия.Получить());
	ЕстьФильтрТипСобытия = РеквизитыЗамера.ФильтрТипСобытия<>Неопределено И РеквизитыЗамера.ФильтрТипСобытия.Количество()>0;
	ЕстьФильтрСвойстваСобытия = ЗначениеЗаполнено(РеквизитыЗамера.ФильтрСвойстваСобытия);
	ЕстьФильтрДлительность = ЗначениеЗаполнено(РеквизитыЗамера.ФильтрДлительность); 
	
	ФайлЗамера = Справочники.ФайлыЗамера.ПолучитьФайлПоПолномуИмени(Замер, АдресURL);
	
	//еще раз проверим прочитан полностью
	СостояниеЧтения = РегистрыСведений.СостояниеЧтения.ПолучитьСостояние(ФайлЗамера);
	Если СостояниеЧтения.ЧтениеЗавершено Тогда
		Возврат 0;
	КонецЕсли;		
	
	auth = Авторизоваться(АдресСервера,АдресИнтернет,Логин,Пароль);
	
	Если auth=Неопределено Тогда
		ЗаписьЖурналаРегистрации("ЧтениеВСправочник",УровеньЖурналаРегистрации.Ошибка,Неопределено,Замер,"Не удалось авторизоваться по адресу '"+АдресURL+"' по замеру ("+Замер+")");
		Возврат 0;
	КонецЕсли;
	
	РазмерФайла = 0;
	
	ДатаНачалаЧтения = ТекущаяДата();
	
	//по факту - количество прочитанных данных
	ПрочитаноСтрок 			= СостояниеЧтения.ПрочитаноСтрок;
	ДатаПрочитанныхДанных 	= СостояниеЧтения.ДатаПрочитанныхДанных;
	
	// читаем в границе
	Если ДатаПрочитанныхДанных<НачалоПериода Тогда
		ДатаПрочитанныхДанных = НачалоПериода;
	КонецЕсли;
	
	
	ПрочитаноСтрок = ПрочитаноСтрок + 1;
	
	
	//часть реквизитов будет одинакова для всего файла
	СтруктураЗаписи 			= ОбновлениеДанных.ПолучитьСтруктуруЗаписиСправочник();
	СтруктураЗаписи.Владелец 	= Замер;
	СтруктураЗаписи.Файл 		= ФайлЗамера;
	
	
	ЕстьДанныеДляЧтения = Истина;
	КоличествоДанныхПакет = 300;
	
	// создадим колонки для чтения
	ТаблицаДанных = новый ТаблицаЗначений;
	КвалификаторДаты = новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
	КвалификаторЧисла = новый КвалификаторыЧисла(20,10,ДопустимыйЗнак.Любой);
	КвалификаторСтроки = новый КвалификаторыСтроки(255,ДопустимаяДлина.Переменная);
	ТаблицаДанных.Колонки.Добавить("ДатаСобытия",Новый ОписаниеТипов("Дата",,,,,КвалификаторДаты));
	ТаблицаДанных.Колонки.Добавить("ДатаСобытияНачалоМинуты",Новый ОписаниеТипов("Дата",,,,,КвалификаторДаты));
	Для каждого стр из мНастройка.МассивСтруктур Цикл
		ТаблицаДанных.Колонки.Добавить("ш"+стр.itemid,новый ОписаниеТипов("Число,Строка,Неопределено",,,,КвалификаторЧисла));
	КонецЦикла;
	
	ДанныеПодключения = ПолучитьДанныеПодключения(АдресСервера);	
	СтруктураЗапроса  = ПолучитьПараетрыСтруктурыЗапроса("history.get",auth);
	
	// првоерим на границу
	Если НЕ (ЗначениеЗаполнено(КонецПериода) И КонецПериода<ТекущаяДата()) Тогда
		КонецПериода = ТекущаяДата();
	КонецЕсли;
	
	Если РежимОбработкиДанных="ПриводитьК1Минуте" Тогда
		time_till = ПолучитьUnixTS(ОкруглитьДоМинуты(КонецПериода,Ложь));                  
		time_from = ПолучитьUnixTS(ДатаПрочитанныхДанных);
	Иначе
		time_till = ПолучитьUnixTS(КонецПериода);                  
		time_from = ПолучитьUnixTS(ДатаПрочитанныхДанных);
	КонецЕсли;
	
	itemids_0 = новый Массив;
	itemids_3 = новый Массив;
	Для каждого стр из мНастройка.МассивСтруктур Цикл
		// 0 с плавающей точкой
		Если стр.value_type="0" или стр.value_type=0 Тогда 
			itemids_0.Добавить(стр.itemid);
			// 3 целые числа
		ИначеЕсли стр.value_type="3" или стр.value_type=3 Тогда
			itemids_3.Добавить(стр.itemid);
		КонецЕсли;
	КонецЦикла;
	
	// читаем пока не конец
	Пока ЕстьДанныеДляЧтения=Истина Цикл
		
		//************************************************************
		// чтаем из api
		ТаблицаДанных.Очистить();
		СоответствиеДат = Новый Соответствие();
		
		//TODO: Учесть, что по времени данные
		// могут разойтись, т.е. 100 записей из одного набора не совпадают с другим
		// поэтому возьмем две даты и ограничим массив по последней максимальной
		// получим данные с плавающей точкой
		Время_0 = Дата(1,1,1);
		Время_3 = Дата(1,1,1);
		Если itemids_0.Количество()>0 Тогда
			ПолучитьДанныеПоТипуДанных(Время_0,itemids_0, 0, time_from, time_till, АдресИнтернет, ДанныеПодключения, КоличествоДанныхПакет, СоответствиеДат, СтруктураЗапроса, ТаблицаДанных);
		КонецЕсли;
		// получим данные целые
		Если itemids_3.Количество()>0 Тогда
 			ПолучитьДанныеПоТипуДанных(Время_3,itemids_3, 3, time_from, time_till, АдресИнтернет, ДанныеПодключения, КоличествоДанныхПакет, СоответствиеДат, СтруктураЗапроса, ТаблицаДанных);
		КонецЕсли;	
		
		// ограничим данные по дате
		ДатаОграниченияДанных = Дата(1,1,1);
		// ограничеваем, когда данные есть в обоих таблицах
		Если НЕ (Время_0=Дата(1,1,1) ИЛИ Время_3=Дата(1,1,1)) Тогда
			Если Время_0 > Время_3 Тогда
				ДатаОграниченияДанных = Время_3;
			Иначе
				ДатаОграниченияДанных = Время_0;
			КонецЕсли;
			МассивКУдалению = новый Массив;
			Для каждого стр из ТаблицаДанных Цикл
				Если стр.ДатаСобытия > ДатаОграниченияДанных Тогда
					МассивКУдалению.Добавить(стр);
				КонецЕсли;
			КонецЦикла;
			Для каждого стр из МассивКУдалению Цикл
				ТаблицаДанных.Удалить(стр);
			КонецЦикла;
		КонецЕсли;
		
		
		// Если стоит режим обработки данных
		Если РежимОбработкиДанных="ПриводитьК1Минуте" Тогда
			ПоследняяМинута = Дата(1,1,1);
			ТаблицаДанныхНачалоМинуты = ТаблицаДанных.Скопировать();
			ТаблицаДанных.Очистить();
			СоответствиеДат.Очистить();
			Для каждого стр из ТаблицаДанныхНачалоМинуты Цикл
				Если ДатаПрочитанныхДанных=стр.ДатаСобытияНачалоМинуты Тогда
					Продолжить;
				КонецЕсли;
				Если ПоследняяМинута<стр.ДатаСобытияНачалоМинуты Тогда
					ПоследняяМинута=стр.ДатаСобытияНачалоМинуты;
				КонецЕсли;
				стр_н = СоответствиеДат.Получить(стр.ДатаСобытияНачалоМинуты);
				Если стр_н=Неопределено Тогда
					стр_н = ТаблицаДанных.Добавить();
					стр_н.ДатаСобытия = стр.ДатаСобытияНачалоМинуты;
					стр_н.ДатаСобытияНачалоМинуты = стр.ДатаСобытияНачалоМинуты;
					СоответствиеДат.Вставить(стр.ДатаСобытияНачалоМинуты,стр_н);
				КонецЕсли;
				Для каждого колонка из мНастройка.МассивСтруктур Цикл
					Если стр["ш"+колонка.itemid]=Неопределено Тогда
						Продолжить;
					КонецЕсли;
					Если стр_н["ш"+колонка.itemid]=Неопределено Тогда
						стр_н["ш"+колонка.itemid] = стр["ш"+колонка.itemid];
					Иначе
						стр_н["ш"+колонка.itemid] = (стр_н["ш"+колонка.itemid]+стр["ш"+колонка.itemid])/2;
					КонецЕсли;
				КонецЦикла;				
			КонецЦикла;
			стр = СоответствиеДат.Получить(ПоследняяМинута);
			Если НЕ стр=Неопределено Тогда
				ТаблицаДанных.Удалить(стр);
			КонецЕсли;

		КонецЕсли;					

		
		//************************************************************
		// записываем данные
		Для каждого данные из ТаблицаДанных Цикл
			
			ДатаПрочитанныхДанных 			= данные.ДатаСобытия;
			СтруктураЗаписи.ДатаСобытия 	= данные.ДатаСобытия;
			СтруктураЗаписи.КлючевыеСвойства.Очистить();
	
			Для каждого стр из мНастройка.МассивСтруктур Цикл
				Свойство = СправочникиСерверПовтИсп.ПолучитьСвойство(стр.name);
				Если НЕ данные["ш"+стр.itemid]=Неопределено Тогда
					ЗначениеСвойства = 0;
					Попытка
						ЗначениеСвойства = Число(данные["ш"+стр.itemid]);
					Исключение
						ЗаписьЖурналаРегистрации("Ошибка загрузки",УровеньЖурналаРегистрации.Ошибка,,,"Проблема преобразования значение"+стр.name+Символы.ПС+данные[стр.name]);
					КонецПопытки;
					СтруктураЗаписи.КлючевыеСвойства.Вставить(Свойство, ЗначениеСвойства);
				КонецЕсли;
			КонецЦикла;
			
			//СтруктураЗаписи.ВсеСвойства = СтрокаТекста; //сохраним в оригинале
			Справочники.СобытияЗамера.ЗаписатьСобытиеЧисло(СтруктураЗаписи);
			
		КонецЦикла;
		
		ЕстьДанныеДляЧтения = НЕ (ТаблицаДанных.Количество()=0);
		ПрочитаноСтрок = ПрочитаноСтрок+ТаблицаДанных.Количество();
		
		// также учитываем изменение времени
		time_from = ПолучитьUnixTS(ДатаПрочитанныхДанных)+1;
		
	КонецЦикла;
	
	// Обновление инфорации о количестве прочитанных строк
	РегистрыСведений.СостояниеЧтения.УстановитьСостояние(
		ФайлЗамера, 
		ДатаНачалаЧтения,
		ПрочитаноСтрок, 
		ДатаНачалаЧтения,
		РазмерФайла,
		ДатаПрочитанныхДанных);
		
	ЗавершитьСеанс(АдресСервера,АдресИнтернет,auth);

	Возврат 0;
	
	
КонецФункции

Процедура ПолучитьДанныеПоТипуДанных(ВремяПоследнейЗаписи,itemids, value_type, time_from, time_till, Знач АдресИнтернет, Знач ДанныеПодключения, КоличествоДанныхПакет, Знач СоответствиеДат, Знач СтруктураЗапроса, Знач ТаблицаДанных)

	// получим для 0
	СтруктураЗапроса.params.Вставить("output","extend");
	СтруктураЗапроса.params.Вставить("history",value_type);
	СтруктураЗапроса.params.Вставить("itemids",itemids);
	СтруктураЗапроса.params.Вставить("time_from",time_from);
	СтруктураЗапроса.params.Вставить("time_till",time_till);
	СтруктураЗапроса.params.Вставить("sortfield","clock");
	СтруктураЗапроса.params.Вставить("sortorder","ASC");
	СтруктураЗапроса.params.Вставить("limit",КоличествоДанныхПакет);
	
	Ответ = ВыполнитьHTTPЗапросКлиентСервер(ДанныеПодключения,АдресИнтернет,"POST",СтруктураЗапроса);
	
	Для каждого стр из Ответ.result Цикл
		
		ДатаСобытия = СконвертироватьВремяUnixTS(число(стр.clock));
		Если ВремяПоследнейЗаписи<ДатаСобытия Тогда
			ВремяПоследнейЗаписи = ОкруглитьДоМинуты(ДатаСобытия,Ложь)+60;
		КонецЕсли;		                             
		стр_н = СоответствиеДат.Получить(ДатаСобытия);
		Если стр_н=Неопределено Тогда
			стр_н = ТаблицаДанных.Добавить();
			стр_н.ДатаСобытия = ДатаСобытия;
			стр_н.ДатаСобытияНачалоМинуты = ОкруглитьДоМинуты(ДатаСобытия,Ложь);
			СоответствиеДат.Вставить(ДатаСобытия,стр_н);
		КонецЕсли;				
		Попытка
			стр_н["ш"+стр.itemid] = Число(стр.value);
		Исключение
			ТекстОшибки = ОписаниеОшибки();
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

Функция Авторизоваться(АдресСервера,АдресИнтернет,Логин,Пароль)
	
	ДанныеПодключения = ПолучитьДанныеПодключения(АдресСервера);
	
	СтруктураЗапроса  = новый Структура();
	СтруктураЗапроса.Вставить("jsonrpc","2.0");
	СтруктураЗапроса.Вставить("method","user.login");
	СтруктураЗапроса.Вставить("params",Новый Структура("user,password",Логин,Пароль));
	СтруктураЗапроса.Вставить("id",1);
	
	Ответ = ВыполнитьHTTPЗапросКлиентСервер(ДанныеПодключения,АдресИнтернет,"POST",СтруктураЗапроса);
	
	Если Ответ=Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Ответ.result;
	
КонецФункции

Функция ЗавершитьСеанс(АдресСервера,АдресИнтернет,auth)
	
	ДанныеПодключения = ПолучитьДанныеПодключения(АдресСервера);
	
	СтруктураЗапроса  = ПолучитьПараетрыСтруктурыЗапроса("user.logout",auth);
	
	Ответ = ВыполнитьHTTPЗапросКлиентСервер(ДанныеПодключения,АдресИнтернет,"POST",СтруктураЗапроса);
	
	Если Ответ=Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Ответ.result;
	
КонецФункции

#КонецОбласти


#Область ВспомогательныеФункции

Функция ОкруглитьДоМинуты(ПараметрДата,НаправлениеВверх=Истина)
	
	Секунды = Секунда(ПараметрДата);
	Если НаправлениеВверх=Истина Тогда
		ВремяОкругления = ПараметрДата-Секунды+60;
	Иначе
		ВремяОкругления = ПараметрДата-Секунды;
	КонецЕсли;
	
	Возврат ВремяОкругления;
	
КонецФункции

Функция ДанныеВСтроку( Данные ) Экспорт
	
	ПараметерыЗаписи = Новый ПараметрыЗаписиJSON(,,,ЭкранированиеСимволовJSON.Нет);
	НастройкиСериализации = Новый НастройкиСериализацииJSON();
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	
	з = Новый ЗаписьJSON;
	з.УстановитьСтроку( ПараметерыЗаписи );
	ЗаписатьJSON( з, Данные, НастройкиСериализации );
	
	Возврат з.Закрыть();
	
КонецФункции

Функция ДанныеИзСтроки( Строка , Знач ИменаСвойствСоЗначениямиДата = "") Экспорт
	
	ч = Новый ЧтениеJSON;
	ч.УстановитьСтроку( Строка );
	Данные = ПрочитатьJSON( ч ,, ИменаСвойствСоЗначениямиДата );
	ч.Закрыть();
	
	Возврат Данные;
	
КонецФункции

Функция ВыполнитьHTTPЗапросКлиентСервер(ДанныеПодключения, URLСсылка, HTTPМетод = "GET", ДанныеКПередаче="", ИменаСвойствСоЗначениямиДата = "") 

	ХТТП = УстановитьСоединениеПоHTTP(ДанныеПодключения);			
 	Заголовки = Новый Соответствие;
   	Заголовки.Вставить("Connection", "keep-alive");
	Заголовки.Вставить("Content-Type", "application/json;charset=utf-8");
	
	ХТТПЗапрос = Новый HTTPЗапрос(URLСсылка,Заголовки);	
	
   
	ТелоПередачи = ДанныеВСтроку(ДанныеКПередаче);
	ХТТПЗапрос.УстановитьТелоИзСтроки(ТелоПередачи,"UTF-8");
	
	Ответ = ХТТП.ВызватьHTTPМетод(HTTPМетод, ХТТПЗапрос);
	
	Если Ответ.КодСостояния = 200 Тогда
		Тело = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		Возврат ДанныеИзСтроки(Тело, ИменаСвойствСоЗначениямиДата);	 
	Иначе
		ТекстОшибки = СтрШаблон("URLСсылка: %1
		|ТелоПередачи: %2
		|Описание ошибки: %3
		|Тело ответа: %4",URLСсылка, ТелоПередачи, ОписаниеОшибки(),Ответ.ПолучитьТелоКакСтроку("UTF-8"));
		ВызватьИсключение "Не удалось получить данные проблема соединения. Ответ сервера: " + Ответ.КодСостояния;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ()

Функция УстановитьСоединениеПоHTTP(ДанныеПодключения) Экспорт
	
	Если ДанныеПодключения.SSL Тогда
		Защита = Новый ЗащищенноеСоединениеOpenSSL();
	Иначе
		Защита = Неопределено;
	КонецЕсли;
	
	Возврат Новый HTTPСоединение(ДанныеПодключения.АдресСервера, ДанныеПодключения.Порт, ДанныеПодключения.Логин, ДанныеПодключения.Пароль
					,,,Защита, ДанныеПодключения.ИспользоватьАутентификациюОС);
КонецФункции 

Функция ПолучитьПараетрыСтруктурыЗапроса(func,auth)
	
	Перем СтруктураЗапроса;
	
	СтруктураЗапроса  = новый Структура();
	СтруктураЗапроса.Вставить("jsonrpc","2.0");
	СтруктураЗапроса.Вставить("method",func);
	СтруктураЗапроса.Вставить("params",Новый Структура());
	СтруктураЗапроса.Вставить("auth",auth);
	СтруктураЗапроса.Вставить("id",1);
	Возврат СтруктураЗапроса;

КонецФункции

Функция ПолучитьДанныеПодключения(АдресСервера)
	
	ДанныеПодключения = новый Структура("АдресСервера,Порт,Логин,Пароль,SSL,ИспользоватьАутентификациюОС");
	ДанныеПодключения.SSL = Ложь;
	ДанныеПодключения.ИспользоватьАутентификациюОС = Ложь;
	ДанныеПодключения.Логин = "";
	ДанныеПодключения.Пароль = "";
	ДанныеПодключения.Порт = 80;
	ДанныеПодключения.АдресСервера = АдресСервера;
	Возврат ДанныеПодключения;

КонецФункции

Функция СконвертироватьВремяUnixTS(UnixTime) 
	Возврат МестноеВремя('19700101' + UnixTime); 
КонецФункции 

Функция ПолучитьUnixTS(ПараметрДата) 
	Возврат УниверсальноеВремя(ПараметрДата) - '19700101'; 
КонецФункции 

#КонецОбласти


