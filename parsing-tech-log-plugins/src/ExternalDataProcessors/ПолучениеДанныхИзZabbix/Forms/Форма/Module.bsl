
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если НЕ ЗначениеЗаполнено(АдресИнтернет) Тогда
		АдресИнтернет = "/zabbix/api_jsonrpc.php";
	КонецЕсли;
	Сортировка = "DESC";
	Первые = 100;
КонецПроцедуры

&НаКлиенте
Процедура Авторизоваться(Команда)
	
	ДанныеПодключения = ПолучитьДанныеПодключения();
	
	СтруктураЗапроса  = новый Структура();
	СтруктураЗапроса.Вставить("jsonrpc","2.0");
	СтруктураЗапроса.Вставить("method","user.login");
	СтруктураЗапроса.Вставить("params",Новый Структура("user,password",Логин,Пароль));
	СтруктураЗапроса.Вставить("id",1);
	
	Ответ = ВыполнитьHTTPЗапросКлиентСервер(ДанныеПодключения,АдресИнтернет,"POST",СтруктураЗапроса);
	
	Если Ответ=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	auth = Ответ.result;
	
	СтруктураЗапроса  = новый Структура();
	СтруктураЗапроса.Вставить("jsonrpc","2.0");
	СтруктураЗапроса.Вставить("method","user.login");
	СтруктураЗапроса.Вставить("params",Новый Структура("user,password,userData",Логин,Пароль,Истина));
	СтруктураЗапроса.Вставить("id",1);
	
	
	Ответ = ВыполнитьHTTPЗапросКлиентСервер(ДанныеПодключения,АдресИнтернет,"POST",СтруктураЗапроса);
	
	sessionid = Ответ.result.sessionid;
	
КонецПроцедуры

#Область ВспомогательныеФункции

&НаКлиенте
Функция ДанныеВСтроку( Данные ) Экспорт
	
	ПараметерыЗаписи = Новый ПараметрыЗаписиJSON(,,,ЭкранированиеСимволовJSON.Нет);
	НастройкиСериализации = Новый НастройкиСериализацииJSON();
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	
	з = Новый ЗаписьJSON;
	з.УстановитьСтроку( ПараметерыЗаписи );
	ЗаписатьJSON( з, Данные, НастройкиСериализации );
	
	Возврат з.Закрыть();
	
КонецФункции

&НаКлиенте
Функция ДанныеИзСтроки( Строка , Знач ИменаСвойствСоЗначениямиДата = "") Экспорт
	
	ч = Новый ЧтениеJSON;
	ч.УстановитьСтроку( Строка );
	Данные = ПрочитатьJSON( ч ,, ИменаСвойствСоЗначениямиДата );
	ч.Закрыть();
	
	Возврат Данные;
	
КонецФункции

&НаКлиенте
Функция ВыполнитьHTTPЗапросКлиентСервер(ДанныеПодключения, URLСсылка, HTTPМетод = "GET", ДанныеКПередаче="", ИменаСвойствСоЗначениямиДата = "") 

	ХТТП = УстановитьСоединениеПоHTTP(ДанныеПодключения);			
 	Заголовки = Новый Соответствие;
   	Заголовки.Вставить("Connection", "keep-alive");
	Заголовки.Вставить("Content-Type", "application/json;charset=utf-8");
	
	ХТТПЗапрос = Новый HTTPЗапрос(URLСсылка,Заголовки);	
	
   
	ТелоПередачи = ДанныеВСтроку(ДанныеКПередаче);
	ХТТПЗапрос.УстановитьТелоИзСтроки(ТелоПередачи,"UTF-8");
	
	Ответ = ХТТП.ВызватьHTTPМетод(HTTPМетод, ХТТПЗапрос);
	
	Если Ответ.КодСостояния = 200 Тогда
		Тело = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		Возврат ДанныеИзСтроки(Тело, ИменаСвойствСоЗначениямиДата);	 
	Иначе
		ТекстОшибки = СтрШаблон("URLСсылка: %1
		|ТелоПередачи: %2
		|Описание ошибки: %3
		|Тело ответа: %4",URLСсылка, ТелоПередачи, ОписаниеОшибки(),Ответ.ПолучитьТелоКакСтроку("UTF-8"));
		ВызватьИсключение "Не удалось получить данные проблема соединения. Ответ сервера: " + Ответ.КодСостояния;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ()

&НаКлиенте
Функция УстановитьСоединениеПоHTTP(ДанныеПодключения) Экспорт 
	
	Если ДанныеПодключения.SSL Тогда
		Защита = Новый ЗащищенноеСоединениеOpenSSL();
	Иначе
		Защита = Неопределено;
	КонецЕсли;
	
	Возврат Новый HTTPСоединение(ДанныеПодключения.АдресСервера, ДанныеПодключения.Порт, ДанныеПодключения.Логин, ДанныеПодключения.Пароль
					,,,Защита, ДанныеПодключения.ИспользоватьАутентификациюОС);
КонецФункции 


#КонецОбласти


&НаКлиенте
Процедура Получитьhistory(Команда)
	
	ДанныеПодключения = ПолучитьДанныеПодключения();
	
	
	Если Корзина.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеName = новый Соответствие();
	Для каждого стр из Корзина Цикл
		СоответствиеName.Вставить(стр.itemid,стр.name);
	КонецЦикла;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаТаблицаДанных;
	
	СтруктураЗапроса  = ПолучитьПараетрыСтруктурыЗапроса("history.get");
	
	itemids_0 = новый Массив;
	itemids_3 = новый Массив;
	
	Для каждого стр из Корзина Цикл
		// 0 с плавающей точкой
		Если стр.value_type="0" или стр.value_type=0 Тогда 
			itemids_0.Добавить(стр.itemid);
			// 3 целые числа
		ИначеЕсли стр.value_type="3" или стр.value_type=3 Тогда
			itemids_3.Добавить(стр.itemid);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ПериодОт) Тогда
		ПериодОт = ТекущаяДата()-3600;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПериодДО) Тогда
		ПериодДо = ТекущаяДата();
	КонецЕсли;
	
	time_from = ПолучитьUnixTS(ПериодОт);
	time_till = ПолучитьUnixTS(ПериодДо);
	
	history.Очистить();
	
	Если itemids_0.Количество()>0 Тогда
		ПолучитьhistoryФрагмент(itemids_0, 0, time_from, time_till, ДанныеПодключения, СоответствиеName, СтруктураЗапроса);
	КонецЕсли;
	Если itemids_3.Количество()>0 Тогда
		ПолучитьhistoryФрагмент(itemids_3, 3, time_from, time_till, ДанныеПодключения, СоответствиеName, СтруктураЗапроса);
	КонецЕсли;
	
	history.Сортировать("ДатаВремя");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьhistoryФрагмент(itemids, value_type, time_from, time_till, Знач ДанныеПодключения, Знач СоответствиеName, Знач СтруктураЗапроса)
	
	Перем Ответ, стр, стр_н;
	
	СтруктураЗапроса.params.Вставить("output","extend");
	СтруктураЗапроса.params.Вставить("history",value_type);
	СтруктураЗапроса.params.Вставить("itemids",itemids);
	СтруктураЗапроса.params.Вставить("sortfield","clock");
	СтруктураЗапроса.params.Вставить("sortorder",Сортировка);
	СтруктураЗапроса.params.Вставить("time_from",time_from);
	СтруктураЗапроса.params.Вставить("time_till",time_till);
	СтруктураЗапроса.params.Вставить("limit",Первые);
	
	Ответ = ВыполнитьHTTPЗапросКлиентСервер(ДанныеПодключения,АдресИнтернет,"POST",СтруктураЗапроса);
	
	Для каждого стр из Ответ.result Цикл
		стр_н = history.Добавить();
		ЗаполнитьЗначенияСвойств(стр_н,стр);
		стр_н.ДатаВремя = СконвертироватьВремяUnixTS(число(стр_н.clock));
		стр_н.Наименование = СоответствиеName.Получить(стр_н.itemid);
		Попытка
			стр_н.Значение = Число(стр_н.value);
		Исключение
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараетрыСтруктурыЗапроса(func)
	
	Перем СтруктураЗапроса;
	
	Если НЕ ЗначениеЗаполнено(auth) Тогда
		Сообщить("Вы не авторизовались!");
	КонецЕсли;
	
	СтруктураЗапроса  = новый Структура();
	СтруктураЗапроса.Вставить("jsonrpc","2.0");
	СтруктураЗапроса.Вставить("method",func);
	СтруктураЗапроса.Вставить("params",Новый Структура());
	СтруктураЗапроса.Вставить("auth",auth);
	СтруктураЗапроса.Вставить("id",1);
	Возврат СтруктураЗапроса;

КонецФункции

&НаКлиенте
Функция ПолучитьДанныеПодключения()
	
	Перем ДанныеПодключения;
	
	ДанныеПодключения = новый Структура("АдресСервера,Порт,Логин,Пароль,SSL,ИспользоватьАутентификациюОС");
	ДанныеПодключения.SSL = Ложь;
	ДанныеПодключения.ИспользоватьАутентификациюОС = Ложь;
	ДанныеПодключения.Логин = "";
	ДанныеПодключения.Пароль = "";
	ДанныеПодключения.Порт = 80;
	ДанныеПодключения.АдресСервера = АдресСервера;
	Возврат ДанныеПодключения;

КонецФункции

&НаКлиенте
Функция СконвертироватьВремяUnixTS(UnixTime) 
	Возврат МестноеВремя('19700101' + UnixTime); 
КонецФункции 

&НаКлиенте
Функция ПолучитьUnixTS(ПараметрДата) 
	Возврат УниверсальноеВремя(ПараметрДата) - '19700101'; 
КонецФункции 

&НаКлиенте
Процедура hostsПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.z_hosts.ТекущиеДанные;
	
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = новый Структура("hostid",ТекущиеДанные.hostid);
	ФиксОтбор = новый ФиксированнаяСтруктура(СтруктураОтбора);		
	
	Элементы.z_items.ОтборСтрок = ФиксОтбор;	
	
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьHosts(Команда)
	
	ДанныеПодключения = ПолучитьДанныеПодключения();
	
	СтруктураЗапроса = ПолучитьПараетрыСтруктурыЗапроса("host.get");
	
	
	Ответ = ВыполнитьHTTPЗапросКлиентСервер(ДанныеПодключения,АдресИнтернет,"POST",СтруктураЗапроса);	
	
	Если Ответ=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	z_hosts.Очистить();
	
	Для каждого стр из Ответ.result Цикл
		
		стр_н = z_hosts.Добавить();
		ЗаполнитьЗначенияСвойств(стр_н,стр);
		
	КонецЦикла;
	

КонецПроцедуры



&НаКлиенте
Процедура ПолучитьItems(Команда)
	
	ТекущиеДанные = Элементы.z_hosts.ТекущиеДанные;
	
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПодключения = ПолучитьДанныеПодключения();
	
	СтруктураЗапроса = ПолучитьПараетрыСтруктурыЗапроса("item.get");
	
		
	СтруктураЗапроса.params.Вставить("output","extend");	
	СтруктураЗапроса.params.Вставить("hostids",ТекущиеДанные.hostid);	
	СтруктураЗапроса.params.Вставить("sortfield","name");	
	
	Ответ = ВыполнитьHTTPЗапросКлиентСервер(ДанныеПодключения,АдресИнтернет,"POST",СтруктураЗапроса);	
	
	Если Ответ=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//удалим старые
	мОтбор = новый Структура("hostid",ТекущиеДанные.hostid);
	н_отбор = z_items.НайтиСтроки(мОтбор);
	
	Для каждого стр из н_отбор Цикл
		z_items.Удалить(стр);
	КонецЦикла;
	
	Для каждого стр из Ответ.result Цикл
		
		стр_н = z_items.Добавить();
		ЗаполнитьЗначенияСвойств(стр_н,стр);
		
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьДанныеВЗамер(Команда)
	ЗагрузитьДанныеВЗамерСервер(Замер);
КонецПроцедуры

&НаСервере
Функция ЗагрузитьДанныеВЗамерСервер(Замер)

	ОбработкаОб = РеквизитФормыВЗначение("Объект");
	ОбработкаОб.ЗагрузитьДанныеВЗамерСервер(Замер);
	
КонецФункции


&НаКлиенте
Процедура ДобавитьВКорзину(Команда)
	
	МассивВыбранныхСтрок = Элементы.z_items.ВыделенныеСтроки;
	
	Если МассивВыбранныхСтрок.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого стр из МассивВыбранныхСтрок Цикл
		
		стр_э = z_items.Получить(стр);
		ДобавитьВКорзинуФрагмент(стр_э);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура z_itemsВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.z_items.ТекущиеДанные;
	
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВКорзинуФрагмент(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКорзинуФрагмент(Знач стр_э)
	
	Перем мОтбор, н_строки, стр_н;
	
	мОтбор = новый Структура("itemid");
	ЗаполнитьЗначенияСвойств(мОтбор,стр_э);
	н_строки = Корзина.НайтиСтроки(мОтбор);
	
	Если н_строки.Количество()=0 Тогда			
		стр_н = Корзина.Добавить();
		ЗаполнитьЗначенияСвойств(стр_н,стр_э);
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура СохранитьНастройки(Команда)
	мНастройка = новый Структура();
	мНастройка.Вставить("Логин",Логин);
	мНастройка.Вставить("Пароль",Пароль);
	мНастройка.Вставить("АдресИнтернет",АдресИнтернет);
	мНастройка.Вставить("АдресСервера",АдресСервера);
	мНастройка.Вставить("МассивСтруктур",новый Массив);
	мНастройка.Вставить("РежимОбработкиДанных",РежимОбработкиДанных);
	Для каждого стр из Корзина Цикл
		Данные = новый Структура("itemid,hostid,name,value_type");
		ЗаполнитьЗначенияСвойств(Данные,стр);
		мНастройка.МассивСтруктур.Добавить(Данные);
	КонецЦикла;
	УправлениеХранилищемНастроекВызовСервера.ЗаписатьДанныеВБезопасноеХранилищеРасширенный(Замер,мНастройка,"Настройка подключения и items для загрузки из zabbix");
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьНастройки(Команда)
	мНастройка = УправлениеХранилищемНастроекВызовСервера.ДанныеИзБезопасногоХранилища(Замер);
	Если мНастройка<>Неопределено Тогда
		Логин = мНастройка.Логин;
		Пароль = мНастройка.Пароль;
		АдресИнтернет = мНастройка.АдресИнтернет;
		АдресСервера = мНастройка.АдресСервера;
		РежимОбработкиДанных = мНастройка.РежимОбработкиДанных;

		Корзина.Очистить();
		Для каждого стр из мНастройка.МассивСтруктур Цикл
			стр_н = Корзина.Добавить();
			ЗаполнитьЗначенияСвойств(стр_н,стр);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры




