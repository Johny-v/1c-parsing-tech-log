#Область ДополнительныеОбработки

Функция СведенияОВнешнейОбработке() Экспорт
	
	МассивНазначений = Новый Массив;
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
	ПараметрыРегистрации.Вставить("Наименование", "Отправка сообщений через API Telegram");
	ПараметрыРегистрации.Вставить("Версия", "2020.05.11");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация", ИнформацияПоИсторииИзменений());
	ПараметрыРегистрации.Вставить("ВерсияБСП", "1.2.1.4");
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	ДобавитьКоманду(ТаблицаКоманд,
	                "Настройка отправки сообщений через API Telegram",
					"ОтправкаСообщенийAPI_Telegram",
					"ОткрытиеФормы",
					Истина,
					);
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры

Функция ИнформацияПоИсторииИзменений()
	Возврат "
	| <div style='text-indent: 25px;'>Данная обработка позволяет отправлять сообщения через API Telegram.</div>
	| <hr />
	| Подробную информацию смотрите по адресу интернет: <a target='_blank' href='https://github.com/Polyplastic/1c-parsing-tech-log'>https://github.com/Polyplastic/1c-parsing-tech-log</a>";
	
КонецФункции


Процедура ОтправитьСообщение(Знач УчетнаяЗапись, Параметры=Неопределено, ТекстСообщения="" ) Экспорт
	
	мНастройки = УправлениеХранилищемНастроекВызовСервера.ДанныеИзБезопасногоХранилища(УчетнаяЗапись);
	
	//Токен = ПолучитьТокенSkype(мНастройки.IDПриложения,мНастройки.Пароль);
	
	ОтправитьСообщениеTelegram(мНастройки,ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти

#Область TelegramAPI

Процедура ОтправитьСообщениеTelegram(Настройки,ТекстСообщения) экспорт
	
	Token    			= Настройки.Токен;
	IDЧата				= Настройки.IDЧата;
	АдресПрокси 		= Настройки.АдресПрокси;
	ПортПрокси 			= Настройки.АдресПрокси;
	ИспользоватьПрокси 	= Настройки.ИспользоватьПрокси;
	
	Если НЕ ЗначениеЗаполнено(ТекстСообщения) Тогда 
		Возврат; 
	КонецЕсли;
	
	
	ИнтернетПрокси = Новый ИнтернетПрокси(Ложь);
	
	ИнтернетПрокси.Установить("https", АдресПрокси, ПортПрокси, "", "", Ложь);
	
	Соединение  =  Новый HTTPСоединение("api.telegram.org",443,,,?(ИспользоватьПрокси=Истина,ИнтернетПрокси,Неопределено),,Новый ЗащищенноеСоединениеOpenSSL());
		
	ПолучениеЗапрос = "bot"+Token+"/sendMessage?chat_id="+IDЧата+"&text="+ КодироватьСтроку(ТекстСообщения,СпособКодированияСтроки.КодировкаURL);
	Запрос = Новый HTTPЗапрос(ПолучениеЗапрос);
	Ответ = Соединение.Получить(Запрос);    
	
	КодСостояния     = Ответ.КодСостояния;
	СтрокаОтвета     = Ответ.ПолучитьТелоКакСтроку();
	
	Если КодСостояния=200 тогда
		ЧтениеОтвета = Новый ЧтениеJSON;
		ЧтениеОтвета.УстановитьСтроку(СтрокаОтвета);
		РезультатСтруктура = ПрочитатьJSON(ЧтениеОтвета);
		Если РезультатСтруктура.ok = Истина Тогда
			СтруктураMessage = РезультатСтруктура.result;
		КонецЕсли;
	Иначе
		ОписаниеОшибки = "Ответ запроса по адресу http telegram "+КодСостояния;
		ЗаписьЖурналаРегистрации("ЧатБот.Telegram:", УровеньЖурналаРегистрации.Предупреждение, , , ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти