#Область ДополнительныеОбработки

Функция СведенияОВнешнейОбработке() Экспорт
	
	МассивНазначений = Новый Массив;
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
	ПараметрыРегистрации.Вставить("Наименование", "Обработка машины состояний");
	ПараметрыРегистрации.Вставить("Версия", "2019.10.29");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация", ИнформацияПоИсторииИзменений());
	ПараметрыРегистрации.Вставить("ВерсияБСП", "1.2.1.4");
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	ДобавитьКоманду(ТаблицаКоманд,
	                "Настройка обработки машины состояний",
					"ОбработкаМашиныСостояний",
					"ОткрытиеФормы",
					Истина,
					);
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры

Функция ИнформацияПоИсторииИзменений()
	Возврат "
	| <div style='text-indent: 25px;'>Выполняется обработка машины состояний.</div>
	| <hr />
	| Подробную информацию смотрите по адресу интернет: <a target='_blank' href='https://github.com/Polyplastic/1c-parsing-tech-log'>https://github.com/Polyplastic/1c-parsing-tech-log</a>";
	
КонецФункции

#КонецОбласти


#Область ЗагрузкаДаных

Процедура ВыполнитьЗагрузкуДанных(Замер,ДополнительнаяОбработка=Неопределено) Экспорт
	
	ОбработатьДанныеМашинойСостояний(Замер);	
	
КонецПроцедуры

Функция ОбработатьДанныеМашинойСостояний(Замер) Экспорт

	// получим настройки загрузки
	мНастройка = УправлениеХранилищемНастроекВызовСервера.ДанныеИзБезопасногоХранилища(Замер);
	
	Если мНастройка=Неопределено Тогда
		ЗаписьЖурналаРегистрации("ЧтениеВСправочник",УровеньЖурналаРегистрации.Ошибка,Неопределено,Замер,"Не созданы настройки для операции произвольной загрузки по замеру ("+Замер+")");
		Возврат 0;
	КонецЕсли;
	
	МашинаСостояний = мНастройка.МашинаСостояний;
	ИсточникЗамер	= мНастройка.ИсточникЗамер;
	ИсточникСвойство= мНастройка.ИсточникСвойство;
	
	// TODO: Машину состояний загружать из файла
	// Загрузим нейронную сеть
	Модель = УправлениеХранилищемНастроекВызовСервера.ДанныеИзБезопасногоХранилища(МашинаСостояний,"Модель");
	FSM = ЗагрузитьПроектXML(Модель);
	Если FSM=Неопределено Тогда
		ЗаписьЖурналаРегистрации("ОбработатьДанныеМашинойСостояний.ЧтениеВСправочник",УровеньЖурналаРегистрации.Ошибка,Неопределено,Замер,"Не загруженна модель машина состояний ("+МашинаСостояний+")для замера ("+Замер+")");
		Возврат 0;
	КонецЕсли;
	// формируем соответствие
	DoPrepare(FSM);
	
	
	//инициализация фильтров
	РеквизитыЗамера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Замер, "ФильтрТипСобытия,ФильтрСвойстваСобытия,ФильтрСвойстваСобытияКроме,ФильтрДлительность,НачалоПериода,КонецПериода,ТипЗамера,ДополнительнаяОбработка");
	НачалоПериода 	= РеквизитыЗамера.НачалоПериода;
	КонецПериода 	= РеквизитыЗамера.КонецПериода;
	РеквизитыЗамера.Вставить("ФильтрТипСобытия", РеквизитыЗамера.ФильтрТипСобытия.Получить());
	ЕстьФильтрТипСобытия = РеквизитыЗамера.ФильтрТипСобытия<>Неопределено И РеквизитыЗамера.ФильтрТипСобытия.Количество()>0;
	ЕстьФильтрСвойстваСобытия = ЗначениеЗаполнено(РеквизитыЗамера.ФильтрСвойстваСобытия);
	ЕстьФильтрДлительность = ЗначениеЗаполнено(РеквизитыЗамера.ФильтрДлительность); 
	
	НавигационнаяСсылка = "/Замер/("+Замер.UUID()+")";
	ФайлЗамера = Справочники.ФайлыЗамера.ПолучитьФайлПоПолномуИмени(Замер, НавигационнаяСсылка);
	
	//еще раз проверим прочитан полностью
	СостояниеЧтения = РегистрыСведений.СостояниеЧтения.ПолучитьСостояние(ФайлЗамера);
	Если СостояниеЧтения.ЧтениеЗавершено Тогда
		Возврат 0;
	КонецЕсли;		
	
	РазмерФайла = 0;
	
	ДатаНачалаЧтения = ТекущаяДата();
	
	//по факту - количество прочитанных данных
	ПрочитаноСтрок 			= СостояниеЧтения.ПрочитаноСтрок;
	ДатаПрочитанныхДанных 	= СостояниеЧтения.ДатаПрочитанныхДанных;
	
	// читаем в границе
	Если ДатаПрочитанныхДанных<НачалоПериода Тогда
		ДатаПрочитанныхДанных = НачалоПериода;
	КонецЕсли;
	
	//часть реквизитов будет одинакова для всего файла
	СтруктураЗаписи 			= ОбновлениеДанных.ПолучитьСтруктуруЗаписиСправочник();
	СтруктураЗаписи.Владелец 	= Замер;
	СтруктураЗаписи.Файл 		= ФайлЗамера;
	
	
	Если НЕ (ЗначениеЗаполнено(КонецПериода) И КонецПериода<ТекущаяДата()) Тогда
		КонецПериода = ТекущаяДата();
		КонецПериода = ОкруглитьДоМинуты(КонецПериода);
	КонецЕсли;
	
	ЕстьДанныеДляОбработки = Истина;	
	
	Запрос = новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ ПЕРВЫЕ 300
	|	Т.ЗначениеЧисло КАК ЗначениеЧисло,
	|	Т.Значение КАК Значение,
	|	Т.Значение КАК Состояние,
	|	Т.Свойство КАК Свойство,
	|	Т.Свойство.Наименование КАК СвойствоНаименование,
	|	Т.Ссылка.ДатаСобытия КАК ДатаСобытия
	|ИЗ
	|	Справочник.СобытияЗамера.КлючевыеСвойства КАК Т
	|ГДЕ
	|	Т.Ссылка.ДатаСобытия > &ДатаНачала
	|	И Т.Ссылка.ДатаСобытия < &ДатаОкончания
	|	И Т.Ссылка.Владелец = &ИсточникЗамер
	|	И Т.Свойство = &ИсточникСвойство
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСобытия";
	
	Запрос.УстановитьПараметр("ИсточникЗамер",ИсточникЗамер);	
	Запрос.УстановитьПараметр("ИсточникСвойство",ИсточникСвойство);
	
	СвойствоСостояниеМашиныСостояний = СправочникиСерверПовтИсп.ПолучитьСвойство("FSM state");
	СвойствоСловоПереходаМашиныСостояний = СправочникиСерверПовтИсп.ПолучитьСвойство("FSM command");

	
	// для бесшовного определения сосояний
	СостояниеFSM = РегистрыСведений.СостояниеОбработкиFSM.ПолучитьСостояние(ФайлЗамера);
	
	ПредыдущееСостояние = СостояниеFSM.ПредыдущееСостояние;
	ТекущееСостояние = СостояниеFSM.ТекущееСостояние;
	
	ЗащитаОтЗацикливанияПоПериоду = Дата(1,1,1);
	
	Пока ЕстьДанныеДляОбработки=Истина Цикл
		
		Если ДатаПрочитанныхДанных=КонецПериода Тогда
			Прервать;
		КонецЕсли;
		
		// если у нас остается в таблице одна запись, которая будет игнорироваться, чтобы она не прыгала
		// ограничим
		Если ДатаПрочитанныхДанных=ЗащитаОтЗацикливанияПоПериоду И ЗащитаОтЗацикливанияПоПериоду<>Дата(1,1,1) Тогда
			Прервать;
		Иначе
			ЗащитаОтЗацикливанияПоПериоду = ДатаПрочитанныхДанных;
		КонецЕсли;
		
		ПрочитаноСтрок = ПрочитаноСтрок+1;
		
		Запрос.УстановитьПараметр("ДатаНачала",ДатаПрочитанныхДанных);
		Запрос.УстановитьПараметр("ДатаОкончания",КонецПериода);
		
		
		ТаблицаДанных = Запрос.Выполнить().Выгрузить();
		ЕстьДанныеДляОбработки = (ТаблицаДанных.Количество()>0);
		
		СоответствиеДат = новый Соответствие;
		слово_ключ = Неопределено;
		Оборудование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Замер,"Оборудование");

		
		Для каждого стр из ТаблицаДанных Цикл
			
			ПредыдущееСостояние = ТекущееСостояние;
			ТекущееСостояние = стр.Состояние;
			слово_ключ 			= ПредыдущееСостояние+"->"+ТекущееСостояние;
			
			//TODO: вынести в машину состояний функция
			мПараметрыДляШаблонаСообщения = новый Структура();
			мПараметрыДляШаблонаСообщения.Вставить("Замер",Замер);
			мПараметрыДляШаблонаСообщения.Вставить("ПредыдущееСостояние",ПредыдущееСостояние);
			мПараметрыДляШаблонаСообщения.Вставить("ТекущееСостояние",ТекущееСостояние);
			мПараметрыДляШаблонаСообщения.Вставить("ДатаСобытия",стр.ДатаСобытия);
			мПараметрыДляШаблонаСообщения.Вставить("СловоКлюч",слово_ключ);
			мПараметрыДляШаблонаСообщения.Вставить("Оборудование",Оборудование);
			мПараметрыДляШаблонаСообщения.Вставить("measurement",Замер);
			мПараметрыДляШаблонаСообщения.Вставить("oldstate",ПредыдущееСостояние);
			мПараметрыДляШаблонаСообщения.Вставить("state",ТекущееСостояние);
			мПараметрыДляШаблонаСообщения.Вставить("date",стр.ДатаСобытия);
			мПараметрыДляШаблонаСообщения.Вставить("word",слово_ключ);
			мПараметрыДляШаблонаСообщения.Вставить("equipment",Оборудование);
			
			DoWork(FSM, ПредыдущееСостояние, ТекущееСостояние, мПараметрыДляШаблонаСообщения);			
			
			ДатаПрочитанныхДанных 			= стр.ДатаСобытия;
			СтруктураЗаписи.ДатаСобытия 	= стр.ДатаСобытия;
			СтруктураЗаписи.КлючевыеСвойства.Очистить();
			
			СтруктураЗаписи.КлючевыеСвойства.Вставить(СвойствоСостояниеМашиныСостояний,стр.Состояние);
			СтруктураЗаписи.КлючевыеСвойства.Вставить(СвойствоСловоПереходаМашиныСостояний, слово_ключ);
			Справочники.СобытияЗамера.ЗаписатьСобытиеЧисло(СтруктураЗаписи);
			
		КонецЦикла;
		
	КонецЦикла;
	
	
	// обновляем ифнормацию по состоянию
	РегистрыСведений.СостояниеОбработкиFSM.УстановитьСостояние(
		ФайлЗамера,
		ПрочитаноСтрок,
		ДатаПрочитанныхДанных,
		ТекущееСостояние,
		ПредыдущееСостояние);
	
	
	// Обновление инфорации о количестве прочитанных строк
	РегистрыСведений.СостояниеЧтения.УстановитьСостояние(
		ФайлЗамера, 
		ДатаНачалаЧтения,
		ПрочитаноСтрок, 
		ДатаНачалаЧтения,
		РазмерФайла,
		ДатаПрочитанныхДанных);

	Возврат 0;
	
	
КонецФункции

Функция ОкруглитьДоМинуты(ПараметрДата,НаправлениеВверх=Истина)
	
	Секунды = Секунда(ПараметрДата);
	Если НаправлениеВверх=Истина Тогда
		ВремяОкругления = ПараметрДата-Секунды+60;
	Иначе
		ВремяОкругления = ПараметрДата-Секунды;
	КонецЕсли;
	
	Возврат ВремяОкругления;
	
КонецФункции

#КонецОбласти



#Область МашинаСостояний

Функция СформироватьТекстСообщенияПоШаблону(Шаблон,ПараметрыШаблона)
	Текст = Шаблон;
	
	// Определяем сообщение заголовок
	НаборПриветсвийСтрокойОпасность = "Эй, народ! У нас проблемы!
	|Обратите внимание!
	|Ситуация стала критической!
	|Ахтунг! Аларма!
	|Что-то пошло не так!
	|Хозяин! Тут проблемы!
	|Все пропало!
	|Свистать всех на верх!
	|Серверу плохо!
	|Кто-нибудь сделайте что-нибудь!";
	
	НаборПриветсвийСтрокой = "Добрый день!
	|Здравствуйте!
	|Привет!
	|Это опять я!
	|Как дела?
	|Слушайте...
	|Эй...";
	
	//TODO: обработать шаблон сообщений
	// Настройка.ШаблонСообщения
	МассивНаборов = СтрРазделить(НаборПриветсвийСтрокойОпасность,Символы.ПС,Ложь);
	ГС = новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	ВариантСообщения = ГС.СлучайноеЧисло(0,МассивНаборов.ВГраница());
	ПараметрыШаблона.Вставить("ПриветствиеОпасность",МассивНаборов[ВариантСообщения]);
	ПараметрыШаблона.Вставить("HelloAlarm",МассивНаборов[ВариантСообщения]);
	
	// Настройка.ШаблонСообщения
	МассивНаборов = СтрРазделить(НаборПриветсвийСтрокой,Символы.ПС,Ложь);
	ГС = новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	ВариантСообщения = ГС.СлучайноеЧисло(0,МассивНаборов.ВГраница());
	ПараметрыШаблона.Вставить("Приветствие",МассивНаборов[ВариантСообщения]);
	ПараметрыШаблона.Вставить("Hello",МассивНаборов[ВариантСообщения]);
	
	ПараметрыШаблона.Вставить("ПереносСтроки",Символы.ПС);
	
	// ЗАменяем параметры
	Для каждого стр из ПараметрыШаблона Цикл
		Текст = СтрЗаменить(Текст,"%"+стр.Ключ+"%",стр.Значение);
	КонецЦикла;
	
	Возврат Текст;
КонецФункции	

Функция НайтиСсылкуНаСправочник(ИмяСправочника,ПараметрыПоиска=Неопределено)
	Ссылка = Неопределено;
	
	Запрос = новый Запрос;
	
	// по полям
	Для каждого стр из ПараметрыПоиска Цикл
		
		Если Нрег(стр.Ключ)="guid" Тогда
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	Т.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник."+ИмяСправочника+" КАК Т
			|ГДЕ
			|	Т.Ссылка = &Ссылка";
			
			Запрос.УстановитьПараметр("Ссылка",Справочники.УчетныеЗаписи.ПолучитьСсылку(новый uuid(стр.Значение)));

		Иначе				
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	Т.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник."+ИмяСправочника+" КАК Т
			|ГДЕ
			|	Т."+стр.Ключ+" = &"+стр.Ключ;
			
			Запрос.УстановитьПараметр(стр.Ключ,стр.Значение);
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Ссылка = Выборка.Ссылка;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	
	Возврат Ссылка;
КонецФункции

Процедура DoPrepare(FSM)
	
	СоответствиеFSM = новый Соответствие;
	
	// найдем дополнительные обработки, учетные записи
	Для каждого стр из  FSM.Rules Цикл
		
		Ссылка = НайтиСсылкуНаСправочник("ДополнительныеОтчетыИОбработки",стр.epf);
		стр.epf.Вставить("Ссылка",Ссылка);
		
		Ссылка = НайтиСсылкуНаСправочник("УчетныеЗаписи",стр.account);
		стр.account.Вставить("Ссылка",Ссылка);
		
	КонецЦикла;
		
	// составим структуру соответсвий
	Для каждого стр из FSM.Rules Цикл
		слово_ключ = стр.state+"->"+стр.newstate;
		
		МассивНастроек = СоответствиеFSM.Получить(слово_ключ);
		
		Если МассивНастроек=Неопределено Тогда
			МассивНастроек = новый Массив;
			СтруктураПерехода = новый Структура;
			СтруктураПерехода.Вставить("epf",стр.epf);
			СтруктураПерехода.Вставить("account",стр.account);
			СтруктураПерехода.Вставить("MessagePattern",стр.MessagePattern);
			МассивНастроек.Добавить(СтруктураПерехода);
			СоответствиеFSM.Вставить(слово_ключ,МассивНастроек);
		Иначе
			СтруктураПерехода = новый Структура;
			СтруктураПерехода.Вставить("epf",стр.epf);
			СтруктураПерехода.Вставить("account",стр.account);
			СтруктураПерехода.Вставить("MessagePattern",стр.MessagePattern);
			МассивНастроек.Добавить(СтруктураПерехода);
		КонецЕсли;
		
	КонецЦикла;

	FSM.Вставить("СоответствиеFSM",СоответствиеFSM);
	


КонецПроцедуры

Процедура DoWork(FSM, ПредыдущееСостояние, ТекущееСостояние, ПараметрыДляШаблонаСообщения)
	
	слово_ключ 			= ПредыдущееСостояние+"->"+ТекущееСостояние;
	слово_ключ_звезда1	= "*->"+ТекущееСостояние;
	слово_ключ_звезда2	= ПредыдущееСостояние+"->*";
	слово_ключ_звезда3	= "*->*";
	
	// !!!! Внимание !!!!
	// смотрим только изменение состояний
	Если НЕ ТекущееСостояние=ПредыдущееСостояние Тогда
		
		// поиск по команде четкой
		МассивНастроек = FSM.СоответствиеFSM.Получить(слово_ключ);
		
		// иначе с *->
		Если МассивНастроек=Неопределено Тогда
			МассивНастроек = FSM.СоответствиеFSM.Получить(слово_ключ_звезда1);
		Конецесли;
		
		// иначе с ->*
		Если МассивНастроек=Неопределено Тогда
			МассивНастроек = FSM.СоответствиеFSM.Получить(слово_ключ_звезда2);
		Конецесли;
		
		// иначе с *->*
		Если МассивНастроек=Неопределено Тогда
			МассивНастроек = FSM.СоответствиеFSM.Получить(слово_ключ_звезда3);
		Конецесли;  			
		
		// если нет никаких действий, тогда продолжаем
		Если НЕ МассивНастроек=Неопределено Тогда
			// обработка
			Для каждого Настройка из МассивНастроек Цикл
				ВыполнитьПроцедуруПерехода(Настройка,ПараметрыДляШаблонаСообщения);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьПроцедуруПерехода(Настройка, ПараметрыДляШаблонаСообщения)
	
	
	// выполняем обработку
	ДополнительнаяОбработка = настройка.epf.Ссылка;
	ХранилищеОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДополнительнаяОбработка,"ХранилищеОбработки");
	ДвоичныеДанные = ХранилищеОбработки.Получить();
	АдресОбработки = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	ЗащитаОтОпасныхДействий = новый ОписаниеЗащитыОтОпасныхДействий;
	ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Ложь;
	ИмяВнешнейОбработки = ВнешниеОбработки.Подключить(АдресОбработки,,Ложь,ЗащитаОтОпасныхДействий);
	ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяВнешнейОбработки);
	
	УчетнаяЗапись = Настройка.account.Ссылка;
	
	ТекстСообщения = СформироватьТекстСообщенияПоШаблону(Настройка.MessagePattern,ПараметрыДляШаблонаСообщения);
	
	// выполняем процедуру
	ВнешняяОбработка.ОтправитьСообщение(УчетнаяЗапись,,ТекстСообщения);		
	
КонецПроцедуры

Функция ЗагрузитьПроектXML(ФайлДанныхXML)
	
	FSM = Новый Структура();
	
	States = Новый Массив;
	Rules = новый Массив;
	
		
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ИгнорироватьПробелы = Ложь;
	
	Попытка
		ЧтениеXML.УстановитьСтроку(ФайлДанныхXML);
	Исключение
		ЗаписьЖурналаРегистрации("НечеткаяЛогика.ЗагрузитьПроектXML",УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.Имя = "project" Тогда
			FSM.Вставить("author",ЧтениеXML.ПолучитьАтрибут("author"));
			FSM.Вставить("url",ЧтениеXML.ПолучитьАтрибут("url"));
			FSM.Вставить("verion",ЧтениеXML.ПолучитьАтрибут("verion"));
			FSM.Вставить("type",ЧтениеXML.ПолучитьАтрибут("type"));
		ИначеЕсли ЧтениеXML.Имя = "description"  И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();	
			FSM.Вставить("description",ЧтениеXML.Значение);
		ИначеЕсли ЧтениеXML.Имя = "fsm" Тогда
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.Имя = "fuzzylogic" И ЧтениеXML.ТипУзла=ТипУзлаXML.КонецЭлемента Тогда
					Прервать;
				ИначеЕсли ЧтениеXML.Имя = "states" Тогда
					Пока ЧтениеXML.Прочитать() Цикл
						Если ЧтениеXML.Имя = "states" И ЧтениеXML.ТипУзла=ТипУзлаXML.КонецЭлемента Тогда
							FSM.Вставить("States",States);
							Прервать;
						ИначеЕсли ЧтениеXML.Имя = "item" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
							Структура = новый Структура();
							Структура.Вставить("state",ЧтениеXML.ПолучитьАтрибут("state"));
							States.Добавить(Структура);  				
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ЧтениеXML.Имя = "rules" Тогда
				Пока ЧтениеXML.Прочитать() Цикл
					Если ЧтениеXML.Имя = "rules" И ЧтениеXML.ТипУзла=ТипУзлаXML.КонецЭлемента Тогда
							FSM.Вставить("Rules",Rules);
							Прервать;
						ИначеЕсли ЧтениеXML.Имя = "item" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
							Структура = новый Структура();
							Структура.Вставить("state",ЧтениеXML.ПолучитьАтрибут("state"));
							Структура.Вставить("newstate",ЧтениеXML.ПолучитьАтрибут("newstate"));
							Структура.Вставить("word",ЧтениеXML.ПолучитьАтрибут("word"));
							Структура.Вставить("delta",Булево(ЧтениеXML.ПолучитьАтрибут("delta")));
							Rules.Добавить(Структура);
						ИначеЕсли ЧтениеXML.Имя = "account" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
							account = Новый Структура();
							account.Вставить("guid",ЧтениеXML.ПолучитьАтрибут("guid"));
							account.Вставить("Наименование",ЧтениеXML.ПолучитьАтрибут("Наименование"));
							Структура.Вставить("account",account);
						ИначеЕсли ЧтениеXML.Имя = "epf" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
							epf = Новый Структура();
							epf.Вставить("guid",ЧтениеXML.ПолучитьАтрибут("guid"));
							epf.Вставить("ИмяОбъекта",ЧтениеXML.ПолучитьАтрибут("ИмяОбъекта"));
							Структура.Вставить("epf",epf);
						ИначеЕсли ЧтениеXML.Имя = "MessagePattern" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
							ЧтениеXML.Прочитать();
							Структура.Вставить("MessagePattern",ЧтениеXML.Значение);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат FSM;
КонецФункции

#КонецОбласти
