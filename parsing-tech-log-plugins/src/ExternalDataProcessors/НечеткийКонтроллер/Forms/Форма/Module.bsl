&НаКлиенте
Перем СтарыеКолонки;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	мОбъект = РеквизитФормыВЗначение("Объект");
	Версия = мОбъект.СведенияОВнешнейОбработке().Версия;
	ЭтаФорма.Заголовок = Версия;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если НЕ ЗначениеЗаполнено(РежимРедактирования) Тогда
		РежимРедактирования = "Графически";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(РежимFuzzy) Тогда
		РежимFuzzy = "Упрощенный";
	КонецЕсли;
	ИзменитьНастройкиРедактирования(РежимРедактирования);
	ОбновитьКонтроллер(Неопределено);
	
	Элементы.ТаблицаFuzzificationType.СписокВыбора.Очистить();
	Элементы.ТаблицаFuzzificationType.СписокВыбора.Добавить("2");
	Элементы.ТаблицаFuzzificationType.СписокВыбора.Добавить("3");
	Элементы.ТаблицаFuzzificationType.СписокВыбора.Добавить("5");
	//Элементы.ТаблицаFuzzificationtype.СписокВыбора.Добавить("7");
	Элементы.ТаблицаFuzzificationType.СписокВыбора.Добавить("no fuzzification");
	СформироватьОписание();
	ТаблицаFuzzificationПриАктивизацииСтроки(Неопределено);
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОписаниеПроекта;
КонецПроцедуры


#Область About

&НаКлиенте
Процедура СформироватьОписание()
	
	AboutHTML = ПолучитьМакетНаСервере("AboutHTML").ПолучитьТекст();
	
КонецПроцедуры

#КонецОбласти


#Область Проект

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие); 
	Диалог.Заголовок = "Выберите файл"; 
	Если ЗначениеЗаполнено(ПутьКПроекту) Тогда
		Диалог.Каталог = ПолучитьКаталогПоПутиФайла(ПутьКПроекту);
	КонецЕсли;
	Диалог.ПолноеИмяФайла = ""; 
	Фильтр = "XML-файл (*.xml)|*.xml"; 
	Диалог.Фильтр = Фильтр; 
	Диалог.МножественныйВыбор = Ложь; 
	ВыборФайлаОткрытияФайла = новый ОписаниеОповещения("ВыборФайлаОткрытияФайла",ЭтотОбъект,новый Структура("ИмяРеквизита","ПутьКПроекту"));
	Диалог.Показать(ВыборФайлаОткрытияФайла);
КонецПроцедуры

&НаКлиенте
Функция  ПолучитьКаталогПоПутиФайла(Знач ПутьКФайлу)
	Файл = новый Файл(ПутьКФайлу);
	Возврат Файл.Путь;	
КонецФункции

&НаКлиенте
Процедура ВыборФайлаОткрытияФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено И ВыбранныеФайлы.Количество() > 0 Тогда
		ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита] = ВыбранныеФайлы[0]; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПроект(Команда)
	
	FuzzyLogic = СформироватьСтруктуруПоДаннымФормы();
	ТекстоваяСтрокаФайла = ВыгрузитьПроектВXML(FuzzyLogic);
	
	Если ТекстоваяСтрокаФайла="" Тогда
		Возврат;
	КонецЕсли;
	
	Документ = новый ТекстовыйДокумент;
	Документ.УстановитьТекст(ТекстоваяСтрокаФайла);
	СохранениеФайлаПроекта = новый ОписаниеОповещения("СохранениеФайлаПроекта",ЭтотОбъект);
	Документ.НачатьЗапись(СохранениеФайлаПроекта,ПутьКПроекту,"UTF-8");

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПроект(Команда)
	FuzzyLogic = ЗагрузитьПроектXML(ПутьКПроекту);
	
	Если FuzzyLogic=Неопределено Тогда
		Сообщить("Ошибка загрузки файла");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеФормыПоСтруктуре(FuzzyLogic);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеФормыПоСтруктуре(FuzzyLogic)
	
	// Заполним общие
	Автор = FuzzyLogic.author;
	АдресИнтернет = FuzzyLogic.url;
	Комментарий = FuzzyLogic.description;
	OnlyFuzzification = FuzzyLogic.OnlyFuzzification;
	// заполним таблицы
	ТаблицаFuzzification.Очистить();
	Для каждого стр из FuzzyLogic.Fuzzification Цикл
		стр_н = ТаблицаFuzzification.Добавить();
		ЗаполнитьЗначенияСвойств(стр_н,стр);
		стр_н.name = стр.name;
		стр_н.type = стр.type;
		стр_н.СписокЛогическихЗначений = ЗакодироватьПоВходнымДанным(стр.LogValues);
	КонецЦикла;
	// 
	ТаблицаDecision.Очистить();
	Для каждого стр из FuzzyLogic.FuzzyController.Decisions Цикл
		стр_н = ТаблицаDecision.Добавить();
		ЗаполнитьЗначенияСвойств(стр_н,стр);
	КонецЦикла;
	ОбновитьКонтроллер(Неопределено);
	// 
	ТаблицаController.Очистить();
	Для каждого Данные из FuzzyLogic.FuzzyController.Rules Цикл
		стр_н = ТаблицаController.Добавить();
		Для каждого стр_колонка из Данные Цикл
			// решение
			Если стр_колонка.name="decision" Тогда
				стр_н.decision = стр_колонка.value;
			ИначеЕсли стр_колонка.name="description" Тогда 
				стр_н.description = стр_колонка.value;
			КонецЕсли;
			// сигналы термы
			Для Каждого колонка из ТаблицаFuzzification Цикл
				Если колонка.name=стр_колонка.name Тогда
					стр_н[колонка.ИмяКолонки] = стр_колонка.value;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		//ЗаполнитьЗначенияСвойств(ТаблицаDecision.Добавить(),стр);
	КонецЦикла;
	ОбновитьСписокВыбораРешенияКонтроллера();
	ОбновитьСписокВыбораВходовДляМодели();
	СкрытьПоказатьКонтроллерРешения(НЕ OnlyFuzzification);
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаКонтроллер;	

	
КонецПроцедуры

&НаКлиенте
Функция СформироватьСтруктуруПоДаннымФормы()
	
	FuzzyLogic = новый Структура();
	
	Fuzzification = новый Массив;
	fuzzycontroller	= новый Структура();
	
	FuzzyLogic.Вставить("fuzzification",Fuzzification);
	FuzzyLogic.Вставить("fuzzycontroller",fuzzycontroller);
	
	// Заполним общие
	FuzzyLogic.Вставить("author",Автор);
	FuzzyLogic.Вставить("url",АдресИнтернет);
	FuzzyLogic.Вставить("description",Комментарий);
	FuzzyLogic.Вставить("OnlyFuzzification",OnlyFuzzification);
	
	// заполним таблицы
	Для каждого вход из ТаблицаFuzzification Цикл
		
		стр_н = новый Структура();
		стр_н.Вставить("name",			XMLСтрока(вход.name));
		стр_н.Вставить("type",			XMLСтрока(вход.type));
		стр_н.Вставить("ExtraLowFrom",	(вход.ExtraLowFrom));
		стр_н.Вставить("ExtraLowTo",	(вход.ExtraLowTo));
		стр_н.Вставить("VeryLowFrom",	(вход.ExtraLowTo));
		стр_н.Вставить("VeryLowTo",		(вход.VeryLowTo));
		стр_н.Вставить("LowFrom",		(вход.VeryLowTo));
		стр_н.Вставить("LowTo",			(вход.LowTo));
		стр_н.Вставить("MediumFrom",	(вход.LowTo));
		стр_н.Вставить("MediumTo",		(вход.MediumTo));
		стр_н.Вставить("HighFrom",		(вход.MediumTo));
		стр_н.Вставить("HighTo",		(вход.HighTo));
		стр_н.Вставить("VeryHighFrom",	(вход.HighTo));
		стр_н.Вставить("VeryHighTo",	(вход.VeryHighTo));
		стр_н.Вставить("ExtraHighFrom",	(вход.VeryHighTo));
		стр_н.Вставить("ExtraHighTo",	(вход.ExtraHighTo));
		стр_н.Вставить("logvalues", 	ПолучитьМассивСтруктурТермовРасшифровкиИзСтроки(вход.СписокЛогическихЗначений));
		
		FuzzyLogic.fuzzification.Добавить(стр_н);
	КонецЦикла;
	
	
	decisions = новый Массив;
	rules = новый Массив;
	
	fuzzycontroller.Вставить("decisions",decisions);
	fuzzycontroller.Вставить("rules",rules);
	
	Для каждого стр из ТаблицаDecision Цикл
		
		стр_н = новый Структура();
		стр_н.Вставить("value",	XMLСтрока(стр.value));
		стр_н.Вставить("level",	XMLСтрока(стр.level));
		стр_н.Вставить("description",	XMLСтрока(стр.description));
		
		decisions.Добавить(стр_н);
	КонецЦикла;
	
	//ТаблицаController.Сортировать("Приоритет");
	
	Для каждого стр из ТаблицаController Цикл
		
		rule = новый Массив;
		
		// поля  		
		Для каждого колонка из СтарыеКолонки Цикл
			Если Найти("decision,description,priority",колонка.Заголовок) Тогда
				Продолжить;
			КонецЕсли;
			стр_н = новый Структура();
			стр_н.Вставить("name",	XMLСтрока(колонка.Заголовок));
			стр_н.Вставить("value",	XMLСтрока(стр[колонка.Имя]));
			rule.Добавить(стр_н);
		КонецЦикла;			
		
		// decision
		стр_н = новый Структура();
		стр_н.Вставить("name",	"decision");
		стр_н.Вставить("value",	стр.decision);	
		rule.Добавить(стр_н);
		// decision description
		стр_н = новый Структура();
		стр_н.Вставить("name",	"description");
		стр_н.Вставить("value",	стр.description);	
		rule.Добавить(стр_н);	
		// priority
		стр_н = новый Структура();
		стр_н.Вставить("name",	"priority");
		стр_н.Вставить("value",	стр.priority);	
		rule.Добавить(стр_н);	
		
		rules.Добавить(rule);
		
	КонецЦикла;
	
	Возврат FuzzyLogic;
	
КонецФункции
	

&НаКлиенте
Функция ВыгрузитьПроектВXML(FuzzyLogic)
	
	XMLСтрока = ""; 
	
	Попытка
		
		// Создать объект записи XML и открыть файл
		НоваяЗаписьXML = Новый ЗаписьXML;
		НоваяЗаписьXML.УстановитьСтроку("UTF-8");
		
		НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
		
		НоваяЗаписьXML.ЗаписатьНачалоЭлемента("project");
		
			НоваяЗаписьXML.ЗаписатьАтрибут("verion","1.0");
			НоваяЗаписьXML.ЗаписатьАтрибут("type","fuzzy logic");
			НоваяЗаписьXML.ЗаписатьАтрибут("author",Автор);
			НоваяЗаписьXML.ЗаписатьАтрибут("url",АдресИнтернет);
			НоваяЗаписьXML.ЗаписатьАтрибут("OnlyFuzzification",XMLСтрока(OnlyFuzzification));
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("description");
				НоваяЗаписьXML.ЗаписатьТекст(СокрЛП(Комментарий));
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();
			
			// fuzzy logic
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("fuzzylogic");
			
				НоваяЗаписьXML.ЗаписатьНачалоЭлемента("fuzzification");
				Для каждого вход из ТаблицаFuzzification Цикл
					НоваяЗаписьXML.ЗаписатьНачалоЭлемента("input");
					НоваяЗаписьXML.ЗаписатьАтрибут("name",	XMLСтрока(вход.name));
					НоваяЗаписьXML.ЗаписатьАтрибут("type",	XMLСтрока(вход.type));
					НоваяЗаписьXML.ЗаписатьАтрибут("ExtraLowFrom",	XMLСтрока(вход.ExtraLowFrom));
					НоваяЗаписьXML.ЗаписатьАтрибут("ExtraLowTo",	XMLСтрока(вход.ExtraLowTo));
					НоваяЗаписьXML.ЗаписатьАтрибут("VeryLowFrom",	XMLСтрока(вход.ExtraLowTo));
					НоваяЗаписьXML.ЗаписатьАтрибут("VeryLowTo",	XMLСтрока(вход.VeryLowTo));
					НоваяЗаписьXML.ЗаписатьАтрибут("LowFrom",	XMLСтрока(вход.VeryLowTo));
					НоваяЗаписьXML.ЗаписатьАтрибут("LowTo",	XMLСтрока(вход.LowTo));
					НоваяЗаписьXML.ЗаписатьАтрибут("MediumFrom",	XMLСтрока(вход.LowTo));
					НоваяЗаписьXML.ЗаписатьАтрибут("MediumTo",	XMLСтрока(вход.MediumTo));
					НоваяЗаписьXML.ЗаписатьАтрибут("HighFrom",	XMLСтрока(вход.MediumTo));
					НоваяЗаписьXML.ЗаписатьАтрибут("HighTo",	XMLСтрока(вход.HighTo));
					НоваяЗаписьXML.ЗаписатьАтрибут("VeryHighFrom",	XMLСтрока(вход.HighTo));
					НоваяЗаписьXML.ЗаписатьАтрибут("VeryHighTo",	XMLСтрока(вход.VeryHighTo));
					НоваяЗаписьXML.ЗаписатьАтрибут("ExtraHighFrom",	XMLСтрока(вход.VeryHighTo));
					НоваяЗаписьXML.ЗаписатьАтрибут("ExtraHighTo",	XMLСтрока(вход.ExtraHighTo));
						// СписокLogicalValuesЛогическихЗначений
						НоваяЗаписьXML.ЗаписатьНачалоЭлемента("logvalues");
						
						МассивСтруктурТермов = ПолучитьМассивСтруктурТермовРасшифровкиИзСтроки(вход.СписокЛогическихЗначений);
						
						Для каждого стр из МассивСтруктурТермов Цикл
							НоваяЗаписьXML.ЗаписатьНачалоЭлемента("item");
							НоваяЗаписьXML.ЗаписатьАтрибут("value",	XMLСтрока(стр.value));
							НоваяЗаписьXML.ЗаписатьАтрибут("synonym",	XMLСтрока(стр.synonym));
							НоваяЗаписьXML.ЗаписатьКонецЭлемента();
						КонецЦикла;
						
						НоваяЗаписьXML.ЗаписатьКонецЭлемента();
						
					НоваяЗаписьXML.ЗаписатьКонецЭлемента();	
				КонецЦикла;
				НоваяЗаписьXML.ЗаписатьКонецЭлемента();
				
				// Нейроны
				НоваяЗаписьXML.ЗаписатьНачалоЭлемента("fuzzycontroller");
				
					// список решений
					НоваяЗаписьXML.ЗаписатьНачалоЭлемента("decisions");
					
					Для каждого стр из ТаблицаDecision Цикл
						НоваяЗаписьXML.ЗаписатьНачалоЭлемента("decision");
							НоваяЗаписьXML.ЗаписатьАтрибут("value",	XMLСтрока(стр.value));
							НоваяЗаписьXML.ЗаписатьАтрибут("level",	XMLСтрока(стр.level));
							НоваяЗаписьXML.ЗаписатьАтрибут("description",	XMLСтрока(стр.description));
						НоваяЗаписьXML.ЗаписатьКонецЭлемента();
					КонецЦикла;

				    НоваяЗаписьXML.ЗаписатьКонецЭлемента();
					
					// правила
					НоваяЗаписьXML.ЗаписатьНачалоЭлемента("rules");

					Для каждого rule из ТаблицаController Цикл
						
						НоваяЗаписьXML.ЗаписатьНачалоЭлемента("rule");
						
						Для каждого колонка из СтарыеКолонки Цикл
							Если Найти("decision,description,priority",колонка.Заголовок) Тогда
								Продолжить;
							КонецЕсли;
							НоваяЗаписьXML.ЗаписатьНачалоЭлемента("input");
								НоваяЗаписьXML.ЗаписатьАтрибут("name",	XMLСтрока(колонка.Заголовок));
								НоваяЗаписьXML.ЗаписатьАтрибут("value",	XMLСтрока(rule[колонка.Имя]));	
							НоваяЗаписьXML.ЗаписатьКонецЭлемента();
						КонецЦикла;
						
						НоваяЗаписьXML.ЗаписатьНачалоЭлемента("decision");
							НоваяЗаписьXML.ЗаписатьАтрибут("value",	XMLСтрока(rule.decision));
						НоваяЗаписьXML.ЗаписатьКонецЭлемента();
						НоваяЗаписьXML.ЗаписатьНачалоЭлемента("description");
							НоваяЗаписьXML.ЗаписатьТекст(XMLСтрока(rule.description));
						НоваяЗаписьXML.ЗаписатьКонецЭлемента();
						НоваяЗаписьXML.ЗаписатьНачалоЭлемента("priority");
							НоваяЗаписьXML.ЗаписатьТекст(XMLСтрока(rule.priority));
						НоваяЗаписьXML.ЗаписатьКонецЭлемента();

						НоваяЗаписьXML.ЗаписатьКонецЭлемента();
						
						
					КонецЦикла;				
					НоваяЗаписьXML.ЗаписатьКонецЭлемента();

		
				НоваяЗаписьXML.ЗаписатьКонецЭлемента();
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();
				
		// Конец основного тега
		НоваяЗаписьXML.ЗаписатьКонецЭлемента();         
		XMLСтрока = НоваяЗаписьXML.Закрыть();
		
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Сообщить(ТекстОшибки);
		XMLСтрока = "";
	КонецПопытки;

	Возврат XMLСтрока;
	
КонецФункции

&НаКлиенте
Функция ЗагрузитьПроектXML(ПутьКФайлу)
	
	FuzzyLogic = Новый Структура();
	
	FuzzyController = новый Массив;
	Fuzzification = новый Массив;
	Decisions = новый Массив;
	Rules = новый Массив;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ИгнорироватьПробелы = Ложь;
	
	Попытка
		ЧтениеXML.ОткрытьФайл(сокрЛП(ПутьКфайлу));
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.Имя = "project" Тогда
			FuzzyLogic.Вставить("author",ЧтениеXML.ПолучитьАтрибут("author"));
			FuzzyLogic.Вставить("url",ЧтениеXML.ПолучитьАтрибут("url"));
			FuzzyLogic.Вставить("verion",ЧтениеXML.ПолучитьАтрибут("verion"));
			FuzzyLogic.Вставить("type",ЧтениеXML.ПолучитьАтрибут("type"));
			FuzzyLogic.Вставить("OnlyFuzzification",Булево(ЧтениеXML.ПолучитьАтрибут("OnlyFuzzification")));
		ИначеЕсли ЧтениеXML.Имя = "description"  И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();	
			FuzzyLogic.Вставить("description",ЧтениеXML.Значение);
		ИначеЕсли  ЧтениеXML.Имя = "description" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			Комментарий = ЧтениеXML.Значение;
		ИначеЕсли ЧтениеXML.Имя = "fuzzylogic" Тогда
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.Имя = "fuzzylogic" И ЧтениеXML.ТипУзла=ТипУзлаXML.КонецЭлемента Тогда
					Прервать;
				ИначеЕсли ЧтениеXML.Имя = "fuzzification" Тогда
					Fuzzification = Новый Массив;
					Пока ЧтениеXML.Прочитать() Цикл
						Если ЧтениеXML.Имя = "fuzzification" И ЧтениеXML.ТипУзла=ТипУзлаXML.КонецЭлемента Тогда
							Прервать;
						ИначеЕсли ЧтениеXML.Имя = "input" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
							Структура = новый Структура();
							Структура.Вставить("name",ЧтениеXML.ПолучитьАтрибут("name"));
							Структура.Вставить("type",ЧтениеXML.ПолучитьАтрибут("type"));
							
							Структура.Вставить("VeryLowFrom",Число(ЧтениеXML.ПолучитьАтрибут("VeryLowFrom")));
							Структура.Вставить("VeryLowTo",Число(ЧтениеXML.ПолучитьАтрибут("VeryLowTo")));
							Структура.Вставить("LowFrom",Число(ЧтениеXML.ПолучитьАтрибут("LowFrom")));
							Структура.Вставить("LowTo",Число(ЧтениеXML.ПолучитьАтрибут("LowTo")));
							Структура.Вставить("MediumFrom",Число(ЧтениеXML.ПолучитьАтрибут("MediumFrom")));
							Структура.Вставить("MediumTo",Число(ЧтениеXML.ПолучитьАтрибут("MediumTo"))); 							
							Структура.Вставить("HighFrom",Число(ЧтениеXML.ПолучитьАтрибут("HighFrom")));
							Структура.Вставить("HighTo",Число(ЧтениеXML.ПолучитьАтрибут("HighTo")));
							Структура.Вставить("VeryHighFrom",Число(ЧтениеXML.ПолучитьАтрибут("VeryHighFrom")));
							Структура.Вставить("VeryHighTo",Число(ЧтениеXML.ПолучитьАтрибут("VeryHighTo")));
							
						ИначеЕсли ЧтениеXML.Имя = "input" И ЧтениеXML.ТипУзла=ТипУзлаXML.КонецЭлемента Тогда
							
							Fuzzification.Добавить(Структура);

						ИначеЕсли ЧтениеXML.Имя = "logvalues" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
							
							LogValues = Новый Массив;
							Пока ЧтениеXML.Прочитать() Цикл
								Если ЧтениеXML.Имя = "logvalues" И ЧтениеXML.ТипУзла=ТипУзлаXML.КонецЭлемента Тогда
									Структура.Вставить("LogValues",LogValues);
									Прервать;
								ИначеЕсли ЧтениеXML.Имя = "item" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
									item = новый Структура();
									item.Вставить("value",ЧтениеXML.ПолучитьАтрибут("value"));
									item.Вставить("synonym",ЧтениеXML.ПолучитьАтрибут("synonym"));
									LogValues.Добавить(item);
								КонецЕсли;
							КонецЦикла;
							
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ЧтениеXML.Имя = "fuzzycontroller" Тогда
					FuzzyController = новый Структура;
 					Пока ЧтениеXML.Прочитать() Цикл
						Если ЧтениеXML.Имя = "fuzzycontroller" И ЧтениеXML.ТипУзла=ТипУзлаXML.КонецЭлемента Тогда
							FuzzyController.Вставить("Decisions",Decisions);
							FuzzyController.Вставить("Rules",Rules);
							Прервать;
						ИначеЕсли ЧтениеXML.Имя = "decisions" Тогда
							Decisions = новый Массив;
							Пока ЧтениеXML.Прочитать() Цикл
								Если ЧтениеXML.Имя = "decisions" И ЧтениеXML.ТипУзла=ТипУзлаXML.КонецЭлемента Тогда
									Прервать;
								ИначеЕсли ЧтениеXML.Имя = "decision" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
									Структура = новый Структура();
									Структура.Вставить("decision",ЧтениеXML.ПолучитьАтрибут("decision"));
									Структура.Вставить("value",ЧтениеXML.ПолучитьАтрибут("value"));
									Структура.Вставить("description",ЧтениеXML.ПолучитьАтрибут("description"));
									Decisions.Добавить(Структура);
								КонецЕсли;
							КонецЦикла;
						ИначеЕсли  ЧтениеXML.Имя="rules" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента  Тогда
							Rules = новый Массив;
							Rule = новый Массив;
							Пока ЧтениеXML.Прочитать() Цикл
								Если ЧтениеXML.Имя = "rules" И ЧтениеXML.ТипУзла=ТипУзлаXML.КонецЭлемента Тогда
									Прервать;
								ИначеЕсли ЧтениеXML.Имя = "rule" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
									Rule = новый Массив;
								ИначеЕсли ЧтениеXML.Имя = "rule" И ЧтениеXML.ТипУзла=ТипУзлаXML.КонецЭлемента Тогда
									Rules.Добавить(Rule);
								ИначеЕсли ЧтениеXML.Имя = "input" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
									Структура = новый Структура();
									Структура.Вставить("type","item");
									Структура.Вставить("name",ЧтениеXML.ПолучитьАтрибут("name"));
									Структура.Вставить("value",ЧтениеXML.ПолучитьАтрибут("value"));
									Rule.Добавить(Структура);
								ИначеЕсли ЧтениеXML.Имя = "decision" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
									Структура = новый Структура();
									Структура.Вставить("type","decision");
									Структура.Вставить("name","decision");
									Структура.Вставить("value",ЧтениеXML.ПолучитьАтрибут("value"));
									Rule.Добавить(Структура);
								ИначеЕсли ЧтениеXML.Имя = "description" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
									Структура = новый Структура();
									Структура.Вставить("type","description");
									Структура.Вставить("name","description");
									ЧтениеXML.Прочитать();
									Структура.Вставить("value",ЧтениеXML.Значение);
									Rule.Добавить(Структура);
								КонецЕсли;
							КонецЦикла;
							
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	FuzzyLogic.Вставить("FuzzyController",FuzzyController);
	FuzzyLogic.Вставить("Fuzzification",Fuzzification);
	
	Возврат FuzzyLogic;
КонецФункции

&НаКлиенте
Процедура СохранениеФайлаПроекта(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат=Истина Тогда
		Сообщить("Файл записан успешно!");
	Иначе
		Сообщить("При сохранении файла произошла ошибка!");	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаОтображения

&НаКлиенте
Процедура ОбновитьКонтроллер(Команда)
	ОбновитьТаблицуМоделиКонтроллер("ТаблицаController");
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьТаблицуМодели(Команда)

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуМоделиКонтроллер(ИмяТаблицы)	
	
	// найдем максимальный номер
	Для каждого стр из ТаблицаFuzzification Цикл
		Попытка
			Если стр.ИмяКолонки="" Тогда
				Продолжить;
			КонецЕсли;
			Номер = Число(СтрЗаменить(стр.ИмяКолонки,"Колонка",""));
			Если МаксимальныйНомерКолонки<=Номер Тогда
				МаксимальныйНомерКолонки=МаксимальныйНомерКолонки+1;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Колонки = новый Массив;
	МассивТипов = новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	КС = Новый КвалификаторыСтроки(20);
	КЧ = Новый КвалификаторыЧисла(20,10);
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов, , ,КЧ, КС);
	ОписаниеЧисло = Новый ОписаниеТипов("Число", , ,КЧ);	
	
	Колонки = новый массив;
	            
	Колонки.Добавить(новый Структура("Имя,ТипЗначения,Ширина,Заголовок,ИмяКолонки","decision",ОписаниеТипов,10,"decision",Неопределено));
	Колонки.Добавить(новый Структура("Имя,ТипЗначения,Ширина,Заголовок,ИмяКолонки","description",ОписаниеТипов,10,"description",Неопределено));
	Колонки.Добавить(новый Структура("Имя,ТипЗначения,Ширина,Заголовок,ИмяКолонки","priority",ОписаниеТипов,10,"priority",Неопределено));
	
	
	Если СтарыеКолонки=Неопределено Тогда
		СтарыеКолонки = новый Массив;
		СтарыеКолонки.Добавить(новый Структура("Имя,ТипЗначения,Ширина,Заголовок","decision",ОписаниеТипов,10,"decision"));
		СтарыеКолонки.Добавить(новый Структура("Имя,ТипЗначения,Ширина,Заголовок","description",ОписаниеТипов,10,"description"));		
		СтарыеКолонки.Добавить(новый Структура("Имя,ТипЗначения,Ширина,Заголовок","priority",ОписаниеТипов,10,"priority"));		
	КонецЕсли;
	
	Для каждого стр из ТаблицаFuzzification Цикл
		// сгенерим уникальный номер колонки
		Если НЕ ЗначениеЗаполнено(стр.ИмяКолонки) Тогда
			стр.ИмяКолонки = "Колонка"+XMLСтрока(МаксимальныйНомерКолонки);
			МаксимальныйНомерКолонки = МаксимальныйНомерКолонки+1;
		КонецЕсли;
		Колонки.Добавить(новый Структура("Имя,ТипЗначения,Ширина,Заголовок,ИмяСледующегоЭлемента,ИмяКолонки",стр.ИмяКолонки,ОписаниеТипов,10,стр.name,"ТаблицаControllerdecision",стр.ИмяКолонки));
	КонецЦикла;

	Попытка
		СоздатьДинамическиеКолонкиТаблицы(ИмяТаблицы,Колонки,СтарыеКолонки,"decision,description,priority");
	Исключение
	КонецПопытки;

	
	СтарыеКолонки = Колонки;
	
	// обновим список выбора для элементов
	Для каждого стр из Колонки Цикл
		
		мОтбор = новый Структура("ИмяКолонки",стр.ИмяКолонки);
		н_стр = ТаблицаFuzzification.НайтиСтроки(мОтбор);
		
		Если н_стр.Количество()<>1 Тогда
			Продолжить;
		КонецЕсли;
		
		
		Элементы[ИмяТаблицы+стр.Имя].РежимВыбораИзСписка = Истина;
		Элементы[ИмяТаблицы+стр.Имя].РедактированиеТекста = Ложь;
		
		МассивСтруктурТермов = ПолучитьМассивСтруктурТермовРасшифровкиИзСтроки(н_стр[0].СписокЛогическихЗначений);
		
		Для каждого лог_переменная из МассивСтруктурТермов Цикл
			Элементы[ИмяТаблицы+стр.Имя].СписокВыбора.Добавить(лог_переменная.value,лог_переменная.synonym);
		КонецЦикла;
		// добавляем вариант любой
		Элементы[ИмяТаблицы+стр.Имя].СписокВыбора.Добавить("*","любой");
		
	КонецЦикла;
	
	ТаблицаControllerПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРедактированияПриИзменении(Элемент)
	ИзменитьНастройкиРедактирования(РежимРедактирования);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНастройкиРедактирования(Режим)
	Если Режим="Графически" Тогда
		Элементы.ТаблицаFuzzificationVeryLowFrom.Видимость = Ложь;
		Элементы.ТаблицаFuzzificationVeryLowTo.Видимость = Ложь;
		Элементы.ТаблицаFuzzificationLowTo.Видимость = Ложь;
		Элементы.ТаблицаFuzzificationMediumTo.Видимость = Ложь;
		Элементы.ТаблицаFuzzificationHighTo.Видимость = Ложь;
		Элементы.ТаблицаFuzzificationVeryHighTo.Видимость = Ложь;
		Элементы.ГруппаГрафическоеПредставление.Видимость = Истина;
	ИначеЕсли Режим="Таблица" Тогда
		Элементы.ТаблицаFuzzificationVeryLowFrom.Видимость = Истина;
		Элементы.ТаблицаFuzzificationVeryLowTo.Видимость = Истина;
		Элементы.ТаблицаFuzzificationLowTo.Видимость = Истина;
		Элементы.ТаблицаFuzzificationMediumTo.Видимость = Истина;
		Элементы.ТаблицаFuzzificationHighTo.Видимость = Истина;
		Элементы.ТаблицаFuzzificationVeryHighTo.Видимость = Истина;
		Элементы.ГруппаГрафическоеПредставление.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаFuzzificationПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.ТаблицаFuzzification.ТекущиеДанные;
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекущиеДанные.type="2" Тогда
		Элементы.VeryLowTo.Видимость = Ложь;
		Элементы.MediumTo.Видимость = Ложь;
		Элементы.HighTo.Видимость = Ложь;
		Элементы.ДекорацияГрафик5.Видимость = Ложь;
		Элементы.ДекорацияГрафик3.Видимость = Ложь;
		Элементы.ДекорацияГрафик2.Видимость = Истина;
		//Элементы.ТаблицаЛогическихЗначений.Видимость = Ложь;
		Элементы.Группа5.Видимость = Истина;
		Элементы.Декорация4.Ширина = 14;
	ИначеЕсли ТекущиеДанные.type="3" Тогда
		Элементы.VeryLowTo.Видимость = Ложь;
		Элементы.HighTo.Видимость = Ложь;
		Элементы.MediumTo.Видимость = Истина;
		Элементы.ДекорацияГрафик5.Видимость = Ложь;
		Элементы.ДекорацияГрафик3.Видимость = Истина;
		Элементы.ДекорацияГрафик2.Видимость = Ложь;
		//Элементы.ТаблицаЛогическихЗначений.Видимость = Ложь;
		Элементы.Группа5.Видимость = Истина;
		Элементы.Декорация4.Ширина = 14;
	ИначеЕсли ТекущиеДанные.type="5" Тогда
		Элементы.VeryLowTo.Видимость = Истина;
		Элементы.HighTo.Видимость = Истина;
		Элементы.MediumTo.Видимость = Истина;
		Элементы.ДекорацияГрафик5.Видимость = Истина;
		Элементы.ДекорацияГрафик3.Видимость = Ложь;
		Элементы.ДекорацияГрафик2.Видимость = Ложь;
		Элементы.Декорация4.Ширина = 6;
		Элементы.Группа5.Видимость = Истина;
		//Элементы.ТаблицаЛогическихЗначений.Видимость = Ложь;
	ИначеЕсли ТекущиеДанные.type="7" Тогда
	ИначеЕсли ТекущиеДанные.type="no fuzzification" Тогда
		Элементы.ДекорацияГрафик5.Видимость = Ложь;
		Элементы.ДекорацияГрафик3.Видимость = Ложь;
		Элементы.ДекорацияГрафик2.Видимость = Ложь;
		Элементы.Группа5.Видимость = Ложь;
		//Элементы.ТаблицаЛогическихЗначений.Видимость = Истина;
	КонецЕсли;
	// обработаем таблицу логических значений
	ОбработатьТаблицуЛогическихЗначений(ТекущиеДанные.СписокЛогическихЗначений);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьТаблицуЛогическихЗначений(СписокЛогическихЗначений)
	
	ТаблицаЛогическихЗначений.Очистить();
	
	МассивСтруктурТермов = ПолучитьМассивСтруктурТермовРасшифровкиИзСтроки(СписокЛогическихЗначений);
	
	Для каждого стр из МассивСтруктурТермов Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаЛогическихЗначений.Добавить(),стр);
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивСтруктурТермовРасшифровкиИзСтроки(КодоваяСтрока)
	
	МассивСтруктурТермов = новый Массив;
	
	МассивТермов = СтрРазделить(КодоваяСтрока,"####",Ложь);
	Для каждого стр из МассивТермов Цикл
		Структура = новый Структура("value,synonym","","");
		ЗначенияСиноним = СтрРазделить(стр,"@@",Ложь);
		Если ЗначенияСиноним.Количество()>0 Тогда
			Структура.value = ЗначенияСиноним[0];	
		КонецЕсли;
		Если ЗначенияСиноним.Количество()>1 Тогда
			Структура.synonym = ЗначенияСиноним[1];	
		КонецЕсли;
		МассивСтруктурТермов.Добавить(Структура);
	КонецЦикла;	
	
	Возврат МассивСтруктурТермов;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаЛогическихЗначенийПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаFuzzification.ТекущиеДанные;
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КодоваяСтрока = "";
	
	// кодируем
	КодоваяСтрока = ЗакодироватьПоВходнымДанным(ТаблицаЛогическихЗначений);
	
	ТекущиеДанные.СписокЛогическихЗначений = КодоваяСтрока; 
	
КонецПроцедуры

&НаКлиенте
Функция ЗакодироватьПоВходнымДанным(Данные)
	
	КодоваяСтрока = "";
	
	Для каждого стр из Данные Цикл		
		ЗначениеСиноним = стр.value+"@@"+стр.synonym;
		КодоваяСтрока = КодоваяСтрока+?(КодоваяСтрока="","","####")+ЗначениеСиноним;
	КонецЦикла;

	Возврат КодоваяСтрока;
КонецФункции



&НаКлиенте
Функция ЗакодироватьТиповоеЗначение(Тип)
	
	КодоваяСтрока = "";
	
	Если Тип="2" Тогда
		КодоваяСтрока = "low@@низкий####high@@высокий"; 
	ИначеЕсли Тип="3" Тогда
		КодоваяСтрока = "low@@низкий####medium@@средний####high@@высокий"; 
	ИначеЕсли Тип="5" Тогда
		КодоваяСтрока = "very low@@очень низкий####low@@низкий####medium@@средний####high@@высокий####very high@@очень высокий";
	ИначеЕсли Тип="7" Тогда
		КодоваяСтрока = "extra low@@сверх низкий####very low@@очень низкий####low@@низкий####medium@@средний####high@@высокий####very high@@очень высокий####extra high@@сверх высокий";
	КонецЕсли;
	
	Возврат КодоваяСтрока;
КонецФункции

&НаКлиенте
Процедура ТаблицаFuzzificationtypeПриИзменении(Элемент)
	ТаблицаFuzzificationПриАктивизацииСтроки(Элемент);
	
	ТекущиеДанные = Элементы.ТаблицаFuzzification.ТекущиеДанные;
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.СписокЛогическихЗначений = ЗакодироватьТиповоеЗначение(ТекущиеДанные.type);
	ОбработатьТаблицуЛогическихЗначений(ТекущиеДанные.СписокЛогическихЗначений);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаFuzzificationПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока=Истина Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ТекущиеДанные.type = "5";
		ТекущиеДанные.СписокЛогическихЗначений = ЗакодироватьТиповоеЗначение(ТекущиеДанные.type);
		ОбработатьТаблицуЛогическихЗначений(ТекущиеДанные.СписокЛогическихЗначений);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаControllerПриИзменении(Элемент)
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаDecisionПриИзменении(Элемент)
	
	ОбновитьСписокВыбораРешенияКонтроллера();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВыбораРешенияКонтроллера()
	
	Перем стр;
	
	Элементы.ТаблицаControllerdecision.СписокВыбора.Очистить();
	Элементы.ТаблицаControllerdecision.РежимВыбораИзСписка = Истина;
	Для каждого стр из ТаблицаDecision Цикл
		Элементы.ТаблицаControllerdecision.СписокВыбора.Добавить(стр.value);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура OnlyFuzzificationПриИзменении(Элемент)
	СкрытьПоказатьКонтроллерРешения(НЕ OnlyFuzzification);
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказатьКонтроллерРешения(Видимость)
	Элементы.ГруппаКонтроллер.Видимость = Видимость;
КонецПроцедуры


#КонецОбласти

#Область ВспомогательныеФункции

// Процедура - Создать динамические колонки таблицы
//
// Параметры:
//  ИмяТаблицы					 - строка	 - имя таблицы на форме строкой
//  МассивСтруктурКолонок		 - 	 - описание создаваемых колонок
//  МассивСтруктурТекущихКолонок - 	 - описание текущих колонок для удаления из текущей таблицы
&НаСервере
Процедура СоздатьДинамическиеКолонкиТаблицы(ИмяТаблицы,МассивСтруктурКолонок,МассивСтруктурТекущихКолонок,КромеИменКолонок="")
	
	МассивУдаляемыхЭлементов = новый Массив;
	МассивДобавляемыхЭлементов = новый Массив;
	
	Для каждого Колонка из МассивСтруктурТекущихКолонок Цикл
		Если Найти(КромеИменКолонок,Колонка.Имя) Тогда
			Продолжить;
		КонецЕсли;
		МассивУдаляемыхЭлементов.Добавить(ИмяТаблицы+"."+Колонка.Имя);
		Элементы.Удалить(Элементы[ИмяТаблицы+Колонка.Имя]);    
	КонецЦикла;   
	
	МассивТипов = новый Массив;
	МассивТипов.Добавить(Тип("ТаблицаЗначений"));           
	ОписаниеТиповТаблица = Новый ОписаниеТипов(МассивТипов);
	МассивТипов = новый Массив;
	МассивТипов.Добавить(Тип("Строка"));          
	ОписаниеТиповСтрока = Новый ОписаниеТипов(МассивТипов);
	
	Для каждого Колонка из МассивСтруктурКолонок Цикл
		Если Найти(КромеИменКолонок,Колонка.Имя) Тогда
			Продолжить;
		КонецЕсли;
		Если Колонка.ТипЗначения = ОписаниеТиповТаблица Тогда
			ОписаниеТипов = ОписаниеТиповСтрока;
		Иначе
			ОписаниеТипов = новый ОписаниеТипов(Колонка.ТипЗначения);
		КонецЕсли;
		НовыйРеквизит = Новый РеквизитФормы(Колонка.Имя, ОписаниеТипов, ИмяТаблицы, Колонка.Имя, Ложь);
		МассивДобавляемыхЭлементов.Добавить(НовыйРеквизит);
	КонецЦикла;
	
	Если МассивДобавляемыхЭлементов.Количество()=0 И МассивУдаляемыхЭлементов.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.ИзменитьРеквизиты(МассивДобавляемыхЭлементов,МассивУдаляемыхЭлементов);
	
	Для каждого Колонка из МассивСтруктурКолонок Цикл                       
		Если Найти(КромеИменКолонок,Колонка.Имя) Тогда
			Продолжить;
		КонецЕсли;
		СледующийЭлемент = Неопределено;
		Если НЕ Колонка.ИмяСледующегоЭлемента=Неопределено Тогда
			СледующийЭлемент = Элементы.Найти(Колонка.ИмяСледующегоЭлемента);
		КонецЕсли;
		НовыйЭлемент = Элементы.Вставить(Элементы[ИмяТаблицы].Имя+Колонка.Имя, Тип("Полеформы"), Элементы[ИмяТаблицы],СледующийЭлемент);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.Видимость = Истина;
		НовыйЭлемент.Доступность = Истина;
		НовыйЭлемент.ТолькоПросмотр = Ложь;   
		НовыйЭлемент.Высота = 0;
		НовыйЭлемент.Ширина = Колонка.Ширина;                
		НовыйЭлемент.Заголовок = Колонка.Заголовок;
		НовыйЭлемент.Подсказка = Колонка.Имя;
		НовыйЭлемент.ПутьКДанным = ИмяТаблицы+"."+Колонка.Имя;    
	КонецЦикла;
	
	
КонецПроцедуры         

// Функция - Получить макет на сервере
//
// Параметры:
//  ИмяМакета	 - строка	 - имя макета
// 
// Возвращаемое значение:
// макет  - макет
//
&НаСервере
Функция ПолучитьМакетНаСервере(ИмяМакета)
	Макет = Неопределено;
	Попытка
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		Макет = ОбработкаОбъект.ПолучитьМакет(ИмяМакета);
	Исключение
		Сообщить(ОписаниеОшибки());		
	КонецПопытки;
	Возврат Макет;
КонецФункции

#КонецОбласти

#Область РаботаСДанными


&НаКлиенте
Процедура СгенерироватьВсеКомбинации(Команда)

	ТаблицаController.Очистить();
	
	Для каждого стр из ТаблицаFuzzification Цикл
		Для каждого элем из ТаблицаFuzzification Цикл
			стр_н = ТаблицаController.Добавить();
			стр_н[стр.ИмяКолонки] = "low";
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаControllerdecisionПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаController.ТекущиеДанные;
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мОтбор = новый Структура("value",ТекущиеДанные.decision);
	н_стр = ТаблицаDecision.НайтиСтроки(мОтбор);
	
	Если н_стр.Количество()<>1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.description = н_стр[0].description; 	
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаFuzzificationПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаFuzzification.ТекущиеДанные;
	Если ТекущиеДанные=НЕопределено Тогда
		Возврат;
	КонецЕсли;
	ОбновитьСписокВыбораВходовДляМодели();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВыбораВходовДляМодели()
	Элементы.ТестовыеДанныеНаВходСигнал.СписокВыбора.Очистить();
	Для каждого стр из ТаблицаFuzzification Цикл
		Элементы.ТестовыеДанныеНаВходСигнал.СписокВыбора.Добавить(стр.name);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Группа1ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если НЕ СтарыеКолонки=Неопределено Тогда
		ОбновитьКонтроллер(Неопределено);
	ИначеЕсли  СтарыеКолонки.Количество()<>ТаблицаFuzzification.Количество() Тогда
		ОбновитьКонтроллер(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатТаблицуЛогическихЗначений(Команда)
	Элементы.ТаблицаЛогическихЗначений.Видимость = НЕ Элементы.ТаблицаЛогическихЗначений.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверку(Команда)
	
	FuzzyLogic = СформироватьСтруктуруПоДаннымФормы();
	
	Если FuzzyLogic=Неопределено Тогда
		Сообщить("Не удалось сфорировать структуру контроллера!");
		Возврат;
	КонецЕсли;
	
	Inputs = Новый Массив;
	Для каждого стр из ТестовыеДанныеНаВход Цикл
		Структура = новый Структура();
		стр.Терм = DoFuzzification(FuzzyLogic,стр.Сигнал,стр.Значение);	
		Структура.Вставить("value",стр.Терм);
		Структура.Вставить("name",стр.Сигнал);
		Inputs.Добавить(Структура);
	КонецЦикла;
	
	ответ = DoDecision(FuzzyLogic,Inputs);
	
	Текст = "(";
	Для каждого стр из ТестовыеДанныеНаВход Цикл
		Текст = Текст + стр.Сигнал+","; 
	КонецЦикла;
	Текст = Текст+") (";
	Для каждого стр из ТестовыеДанныеНаВход Цикл
		Текст = Текст + стр.Терм+","; 
	КонецЦикла;
	Текст = Текст+")";
	Текст = Текст+Символы.ПС+" решение: "+ответ.decision+" ("+ответ.description+")";
	
	Desision = Текст+Символы.ПС+Символы.ПС+Символы.ПС+Desision+Символы.ПС;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАдресИнтернет(Команда)
	Если ЗначениеЗаполнено(АдресИнтернет) Тогда
		ЗапуститьПриложение(АдресИнтернет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СгенерироватьКомбинацииПоРабочимПараметрам(Команда)
	Сообщить("В текущей версии не доступно. Ожидайте!");
КонецПроцедуры

// выполнить фуззификацию сигналов
&НаКлиенте
Функция DoFuzzification(FuzzyLogic,Name,Value)
	
	терм = "undefined";
	
	// обработаем сигнал с именем name и значением value
	func = Неопределено;
	// найдем функцию фаззификации сигнала
	Для каждого стр из FuzzyLogic.fuzzification Цикл
		Если стр.name=Name Тогда
			func = стр;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// если не нашли
	Если func=Неопределено Тогда
		терм = "error fuzzification";
		Возврат терм;
	КонецЕсли;
	
	// выполняем
	Если func.type="2" Тогда
		Если func.LowTo>Value Тогда
			терм = func.logvalues[0].value;
		ИначеЕсли func.LowTo<=Value Тогда
			терм = func.logvalues[1].value;
		КонецЕсли;
	ИначеЕсли func.type="3" Тогда
		Если func.LowTo>Value Тогда
			терм = func.logvalues[0].value;
		ИначеЕсли func.MediumFrom<=Value И func.MediumTo>Value Тогда
			терм = func.logvalues[1].value;
		ИначеЕсли func.HighFrom<=Value Тогда
			терм = func.logvalues[2].value;
		КонецЕсли;
	ИначеЕсли func.type="5" Тогда
		Если func.VeryLowTo>Value Тогда
			терм = func.logvalues[0].value;
		ИначеЕсли func.LowFrom<=Value И func.LowTo>Value Тогда
			терм = func.logvalues[1].value;
		ИначеЕсли func.MediumFrom<=Value И func.MediumTo>Value Тогда
			терм = func.logvalues[2].value;
		ИначеЕсли func.HighFrom<=Value И func.HighTo>Value Тогда
			терм = func.logvalues[3].value;
		ИначеЕсли func.VeryHighFrom<=Value Тогда
			терм = func.logvalues[4].value;
		КонецЕсли;
	ИначеЕсли func.type="7" Тогда
		Если func.ExtraLowTo>Value Тогда
			терм = func.logvalues[0].value;
		ИначеЕсли func.VeryLowFrom<=Value И func.VeryLowTo>Value Тогда
			терм = func.logvalues[1].value;
		ИначеЕсли func.LowFrom<=Value И func.LowTo>Value Тогда
			терм = func.logvalues[2].value;
		ИначеЕсли func.MediumFrom<=Value И func.MediumTo>Value Тогда
			терм = func.logvalues[3].value;
		ИначеЕсли func.HighFrom<=Value И func.HighTo>Value Тогда
			терм = func.logvalues[4].value;
		ИначеЕсли func.VeryHighFrom<=Value И func.VeryHighTo>Value Тогда
			терм = func.logvalues[5].value;
		ИначеЕсли func.ExtraHighFrom<=Value Тогда
			терм = func.logvalues[6].value;
		КонецЕсли;
	Иначе
		терм = XMLСтрока(Value);
	КонецЕсли;
		
	
	Возврат терм;
	
КонецФункции

&НаКлиенте
Функция DoDecision(FuzzyLogic,Inputs)
	
	СтруктураРешения = новый Структура("decision,description","undefined","");
	
	СоответсвиеВходов = новый Соответствие;
	Для каждого стр из Inputs Цикл
		СоответсвиеВходов.Вставить(стр.name,стр.value);
	КонецЦикла;
	
	// TODO: нужно учесть порядок
	// TODO: элементы со * проверять в последнюю очередь
	// и чем больше звездочек, тем позже
	// обработаем сигнал с именем name и значением value
	Для каждого rule из FuzzyLogic.fuzzycontroller.rules Цикл
		
		РешениеНайденно = Истина;
		decision = "";
		description = "";
		
		Для каждого элемент из rule Цикл
			
			Если элемент.name="decision" Тогда
				decision = элемент.value;
			КонецЕсли;
			
			Если элемент.name="description" Тогда
				description = элемент.value;
			КонецЕсли;
			
			Если элемент.name="decision" ИЛИ элемент.name="description" ИЛИ элемент.name="priority" Тогда
				Продолжить;
			КонецЕсли;
			
			Если элемент.value="*" Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ СоответсвиеВходов.Получить(элемент.name)=элемент.value Тогда
				РешениеНайденно=Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если РешениеНайденно=Истина Тогда
			СтруктураРешения.decision = decision;
			СтруктураРешения.description = description;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураРешения;
	
КонецФункции
#КонецОбласти

#Область Контроль

&НаКлиенте
Процедура ТаблицаЛогическихЗначенийПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элементы.ТаблицаFuzzification.ТекущиеДанные;
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ТекущиеДанные.type="no fuzzification" Тогда
		Отказ=Истина;
		ПоказатьОповещениеПользователя("Удалять нельзя!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЛогическихЗначенийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ТекущиеДанные = Элементы.ТаблицаFuzzification.ТекущиеДанные;
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ТекущиеДанные.type="no fuzzification" Тогда
		Отказ=Истина;
		ПоказатьОповещениеПользователя("Добавлять нельзя!");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПрвоеркаОшибокМодели

&НаКлиенте
Процедура ПроверитьНаОшибки(Команда)
	
	КоличествоОшибок = 0;
	
	// 1
	ПроверитьНаДублиТаблицуФаззификации(КоличествоОшибок);
	
	// 2
	ПроверимНаПорядокДиапазоновВТаблицеФаззификации(КоличествоОшибок);
	
	// 3
	ПроверимНаДублиПравилТаблицыПравил(КоличествоОшибок);
	
	Если КоличествоОшибок=0 Тогда
		Сообщить("Ошибок не обнаружено!");
	Иначе
		Сообщить("Обнаружено "+КоличествоОшибок+" ошибок.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаДублиТаблицуФаззификации(КоличествоОшибок)
	
	СоответствиеНаименований = новый Соответствие();
	
	Для каждого стр из ТаблицаFuzzification Цикл
		количество = СоответствиеНаименований.Получить(стр.name);
		Если количество=Неопределено Тогда
			СоответствиеНаименований.Вставить(стр.name,1);
		Иначе
			СоответствиеНаименований.Вставить(стр.name,количество+1);
		КонецЕсли;
	КонецЦикла;
	
	// 
	Для каждого стр из СоответствиеНаименований Цикл
		Если стр.Значение>1 Тогда
			КоличествоОшибок = КоличествоОшибок + 1;
			Сообщить("Количество дублирующихся входных сигналов '"+стр.Ключ+"' равно "+стр.Значение+". Удалите дублирующиеся!");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверимНаПорядокДиапазоновВТаблицеФаззификации(КоличествоОшибок)
КонецПроцедуры

&НаКлиенте
Процедура ПроверимНаДублиПравилТаблицыПравил(КоличествоОшибок)
	
	СоответствиеКлючейПравил = новый Соответствие;
	
	Для каждого стр из ТаблицаController Цикл
	КонецЦикла;
	
	// 
	Для каждого стр из СоответствиеКлючейПравил Цикл
		Если стр.Значение>1 Тогда
			КоличествоОшибок = КоличествоОшибок + 1;
			Сообщить("Количество дублирующихся правил '"+стр.Ключ+"' равно "+стр.Значение+". Удалите дублирующиеся!");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти